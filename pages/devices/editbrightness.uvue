<template>
	<scroll-view :bounces="false" class="app">
		<view class="space-box"></view>
		<view class="device-info">
			<view class="item shadow" v-if="deviceInfo.hasOwnProperty('id')">
				<view class="c" style="padding-bottom: 24rpx;justify-content: flex-start;">
					<view v-if="deviceInfo['connectStatus'] == 1" class="icon-box icon-box-big wi2">
						<image class="icon" src="/static/icon/2-w.png" mode="widthFix"></image>
					</view>
					<view v-else class="icon-box icon-box-big wi">
						<image class="icon" src="/static/icon/2.png" mode="widthFix"></image>
					</view>
					<view>
						<view>
							<text class="wifi-t1">{{deviceInfo['name']}}</text>
						</view>
						<view class="text-box">
							<text class="key">SN:</text>
							<text class="value">{{deviceInfo['snCode']}}</text>
						</view>
					</view>
				</view>
				<view class="c" style="background-color: #f9f9f9;border-radius: 12rpx;padding: 24rpx;">
					<view class="text-box-v">
						<text class="key">{{$t('index.Resolution')}}</text><text class="value">{{deviceInfo['width']}}*{{deviceInfo['height']}}</text>
					</view>
					<view class="text-box-v">
						<text class="key">{{$t('index.Status')}}</text> 
						<text class="value" :class="{active: deviceInfo['status'] == '1'}">{{deviceInfo['status'] == '0' ? $t('index.Inactive') : $t('index.Activate')}}</text>
					</view>
					<view class="text-box-v">
						<text class="key">{{$t('index.ConnectionStatus')}}</text> 
						<text class="value" :class="{active: deviceInfo['connectStatus'] == 1}">{{deviceInfo['connectStatus'] == 0 ? $t('index.NotConnected') : $t('index.Connected')}}</text>
					</view>
				</view>
				<view class="c" style="padding-top: 24rpx;">
					<view  class="text-box">
						<text class="key">{{$t('index.DeviceValidityPeriod')}}:</text>
						<text class="value">{{deviceInfo['validEnd']}}</text>
						<text class="value vend" v-if="deviceInfo['isvalidEnd']">({{$t('index.Expired')}})</text>
					</view>
					<view class="wifi-btns">
						
					</view>
				</view>
			</view>
		</view>
		<view class="device-option-title">
			<text class="t">{{$t('index.DeviceControl')}}</text>
			<text class="t2">&#8594;</text>
			<text class="t">{{$t('device.BrightnessAdjustment')}}</text>
		</view>
		<view>
			<view class="active-user">
				<text class="t">-- {{ $t('device.RealTimerControl') }} --</text>
			</view>
			<list-view class="uc-menus end">
				<list-item class="uc-menus-item">
					<view class="uc-menus-item-title">
						<text>{{$t('device.BrightnessAdjustment')}}</text>
					</view>
					<view class="input-box">
						<text class="t">{{value_input}}%</text>
					</view>
				</list-item>
				<list-item class="uc-menus-item-2">
					<view class="icon-box no-margin">
						<image class="icon" src="/static/svg/24gf-volumeZero.png" mode="widthFix"></image>
					</view>
					<slider 
						:value="value_input" 
						@changing="changing"
						@change="changed"
						foreColor="#007aff"
						style="width: 76%"></slider>
					<view class="icon-box no-margin">
						<image class="icon" src="/static/svg/24gf-volumeHigh.png" mode="widthFix"></image>
					</view>
				</list-item>
			</list-view>
			<view class="space-box"></view>					
		</view>
		<timer-controls :items="deviceControls" :pageType="pageType" @refresh="getDeviceControls"></timer-controls>
		<view class="add shadow" @click="handleCreate()">
			<image class="image" src="/static/svg/add.png" mode="aspectFill"></image>
		</view>
	</scroll-view>
</template>

<script lang="uts">
	import { APIS } from '@/api/config.uts'
	import { routeGoto } from '@/common/router.uts'
	import { useState } from '@/store/index.uts'
	import { request } from '@/utils/http/index'
	
	export default {
		data() {
			return {
				userInfo: {} as UTSJSONObject,
				deviceInfo: {} as UTSJSONObject,
				deviceControls: [] as UTSJSONObject[],
				value_input: 0,
				pageType: "Brightness"
			}
		},
		onLoad(): void {
			let that = this
			const { state } = useState();
			if (state.token != '' && state.activeUser['id'] != null) {
				that.userInfo = state.activeUser;
				that.deviceInfo = state.activeDevice;
				console.log(that.deviceInfo);
				const currentDate = new Date().getTime()
				const day = this.deviceInfo['validEnd'] as string;
				const daynum = new Date(day).getTime() as number;
				if(currentDate > daynum && currentDate - daynum > 24 * 60 * 60 * 1000){
					that.deviceInfo['isvalidEnd'] = true;
				}else {
					that.deviceInfo['isvalidEnd'] = false;
				}
				
				if(this.deviceInfo['brightness'] == null){
					this.value_input = 0;
				}else{
					this.value_input = this.deviceInfo['brightness'] as number;
				}
			}
			else {
				uni.showModal({
					title: $t("error.SelectDevice"),
					success: (res: UniShowModalResult) => {
						if(res.confirm){
							routeGoto('/pages/index/devices');
						}
					}
				})
			}
			uni.setNavigationBarTitle({
				title: this.$t('pages.brightnessAdjustment')
			});
		},
		onShow() {			
			this.getDeviceControls();
		},
		methods: {
			handleRouteGoto(url: string){
				routeGoto(url)
			},
			async getDeviceControls() {
				try {
					uni.showLoading({
						title: ''
					});
					
					const person: UTSJSONObject = {}
					const currentDate = Date.now();
					const apiUrl = APIS.deviceControl.getString('getAll')!;
					const param = `?deviceId=${this.deviceInfo["snCode"]}&controlType=${this.pageType}&executionType=SCHEDULED`;
					const result = await request('GET', apiUrl + param, person) 
					this.deviceControls = result as UTSJSONObject[];
					this.deviceControls.forEach((item: UTSJSONObject) => {
						const nitem = item as UTSJSONObject;
						const endDay = item['validDateEnd'] as string;
						const daynum = new Date(endDay).getTime();
						
						if(currentDate > daynum && (currentDate - daynum) > 1000 * 3600 * 24){
							nitem['isvalidEnd'] = true;
						}else{
							nitem['isvalidEnd'] = false;
						}
						nitem['isSelect'] = false;
					});
					uni.hideLoading();
				} catch (err){
					uni.hideLoading();
					const errObj = JSON.parse(JSON.stringify(err)) as UTSJSONObject;
					console.log(errObj);
					uni.showToast({
						icon: 'none',
						title: `${errObj.message}`,
						duration: 3000,
					})
				}
			},
			handleCreate(){
				routeGoto(`/pages/devices/timercontrol?control_id=-1&control_type=${this.pageType}`);
			},			
			changing(event: UniSliderChangeEvent){
				this.value_input = event.detail.value
			},
			async changed(event: UniSliderChangeEvent){
				this.value_input = event.detail.value
				//修改设备音量
				try {
					uni.showLoading({
						title: ''
					});
					const controlData = {
						"controlType": this.pageType,
						"deviceId": this.deviceInfo['snCode'],
						"execution": "00:00:00",
						"executionType": "REAL_TIME",
						"isEnabled": 0,
						"repeatMode": "",
						"userAccount": this.deviceInfo['userAccount'],
						"validDateEnd": new Date().toISOString(),
						"validDateStart": new Date().toISOString(),
						"value": this.value_input,
						"id": 0
					} as UTSJSONObject;
						
					const dataObj = {
						cmd: 'CMD|Brightness|',
						data: JSON.stringify([controlData]),
						deviceSnCode: this.deviceInfo['snCode']
					} as UTSJSONObject
					
					const res = await request("POST", APIS.sendCMD as string, dataObj) as boolean;
					if(!res) {
						uni.showToast({
							icon: 'none',
							title: `${$t("index.Device")}：${this.deviceInfo['snCode']} ${$t("error.BrightnessFailure")}`,
							duration: 3000,
							success: () => { 
							}
						})
						return;
					}
					
					await request("PUT", APIS.updateDevice as string, {
						id: this.deviceInfo['id'],
						brightness: this.value_input
					});
					
					this.deviceInfo['brightness']=this.value_input;
					const { setActiveDevice } = useState();
					setActiveDevice(this.deviceInfo);
					const apiUrl = APIS.deviceControl.getString('save')!;
					await request("POST", apiUrl, controlData);
					uni.showToast({
						icon: 'none',
						title: `${$t("index.Device")}：${this.deviceInfo['snCode']} ${$t("error.BrightnessSuccess")}`,
						duration: 3000,
					})
					
					uni.hideLoading();
				} catch (err){
					uni.hideLoading();
					const errObj = JSON.parse(JSON.stringify(err)) as UTSJSONObject;
					console.log(errObj);
					uni.showToast({
						icon: 'none',
						title: `${errObj.message}`,
						duration: 3000,
					})
				}
			}
		}
	}
</script>

<style lang="scss">
	.device-info {
		padding: 0 36rpx;
		.item{
			background-color: $uni-bg-color;
			border-radius: $uni-border-radius-lg;
			padding: 16rpx 24rpx;
			margin: 0 0 36rpx 0;
			.c{
				flex-direction: row;
				align-items: center;
				justify-content: space-between;
				padding: 8rpx 0;
				.text-box{
					flex-direction: row;
					align-items: center;
					justify-content: flex-start;
				}
				.text-box,
				.text-box-v{
					.wifi-t1{
						font-size: 32rpx;
					}
					.key{
						font-size: 24rpx;
						color: $uni-text-color-placeholder;
						margin-right: 16rpx;
					}
					.value{
						font-size: 24rpx;
						color: $uni-text-color;
					}
					.value.active{
						color: $uni-color-primary;
					}
					.value.vend{
						color: $uni-color-warning;
					}
				}
				.text-box-v{
					.key{
						text-align: center;
						margin-right: 0;
					}
					.value{
						text-align: center;
						font-weight: bold;
						padding-top: 12rpx
					}
				}
				.wi{
					background-color: beige;
					padding: 12rpx;
					border-radius: 12rpx;
				}
				.wi2{
					background-color: $uni-color-primary;
					padding: 12rpx;
					border-radius: 12rpx;
				}
				
				.wifi-btns{
					.btn{
						// border-radius: 120rpx;
						border: none;
						color: $uni-text-color-inverse;
						font-size: 28rpx;
						background-color: $uni-bg-color-blue;
					}
					.btn.del{
						color: $uni-color-error;
						background-color: $uni-text-color-inverse;
						border: 1px solid #f9f9f9;
					}
				}
			}
		}
	}
	.device-option-title{
		flex-direction: row;
		align-items: center;
		justify-content: flex-start;
		padding: 24rpx 36rpx;
		.t{
			font-size: $uni-font-size-sm;
			color: $uni-color-title;
		}
		.t2{
			font-size: $uni-font-size-sm;
			color: $uni-color-grey2;
			margin: 0 18rpx;
		}
	}
	.list-box{
		padding: 0 32rpx;
		.uc-menus{
			border-radius: $uni-border-radius-lg;
			background-color: $uni-bg-color;
			padding: 0rpx 32rpx;
			border-radius: $uni-border-radius-lg;
			
			.uc-menus-item{
				flex-direction: row;
				align-items: center;
				justify-content: space-between;
				border-bottom: 1px solid #eeeeee;
				padding: 32rpx 0rpx;
				.uc-menus-item-title{
					flex-direction: row;
					align-items: center;
					justify-content: flex-start;
				}
				.icon-box{
					margin-right: 0 !important;
				}
				.input-box{
					.t{
						font-size: 24rpx;
					}
				}
			}
			.uc-menus-item.end{
				border: none;
			}
			.uc-menus-item-2{
				width: 100%;
				padding: 0rpx 0rpx 32rpx 0;
				border-bottom: 1px solid #eeeeee;
				flex-direction: row;
				align-items: center;
				justify-content: space-between;
			}
		}
	}
	.btns-box{
		width: 100%;
		padding: 24rpx 36rpx;
		flex-direction: row;
		align-items: center;
		justify-content: space-between;
		background-color: $uni-bg-color;
		position: fixed;
		bottom: 0;
		left: 0;
		
		.upgrade{
			width: 31.4%;
			color: $uni-text-color-inverse;
			background-color: $uni-color-primary;
			border: 1px solid $uni-color-primary;
		}
		.stop{
			width: 31.4%;
			color: $uni-text-color-inverse;
			background-color: $uni-color-error;
			border: 1px solid $uni-color-error;
		}
		.default{
			width: 31.4%;
			color: $uni-text-color-placeholder;
			background-color: $uni-bg-color;
			border: 1px solid $uni-text-color-placeholder;
		}
	}
	
</style>
