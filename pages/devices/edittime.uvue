<template>
	<scroll-view class="app" enable-back-to-top="{{false}}">
		<view class="space-box"></view>
		<view class="device-info">
			<view class="item shadow" v-if="deviceInfo.hasOwnProperty('id')">
				<view class="c" style="padding-bottom: 24rpx;justify-content: flex-start;">
					<view v-if="deviceInfo['connectStatus'] == 1" class="icon-box icon-box-big wi2">
						<image class="icon" src="/static/icon/2-w.png" mode="widthFix"></image>
					</view>
					<view v-else class="icon-box icon-box-big wi">
						<image class="icon" src="/static/icon/2.png" mode="widthFix"></image>
					</view>
					<view>
						<view>
							<text class="wifi-t1">{{deviceInfo['name']}}</text>
						</view>
						<view class="text-box">
							<text class="key">SN:</text>
							<text class="value">{{deviceInfo['snCode']}}</text>
						</view>
					</view>
				</view>
				<view class="c" style="background-color: #f9f9f9;border-radius: 12rpx;padding: 24rpx;">
					<view class="text-box-v">
						<text class="key">{{$t('index.Resolution')}}</text><text class="value">{{deviceInfo['width']}}*{{deviceInfo['height']}}</text>
					</view>
					<view class="text-box-v">
						<text class="key">{{$t('index.Status')}}</text> 
						<text class="value" :class="{active: deviceInfo['status'] == '1'}">{{deviceInfo['status'] == '0' ? $t('index.Inactive') : $t('index.Activate')}}</text>
					</view>
					<view class="text-box-v">
						<text class="key">{{$t('index.ConnectionStatus')}}</text> 
						<text class="value" :class="{active: deviceInfo['connectStatus'] == 1}">{{deviceInfo['connectStatus'] == 0 ? $t('index.NotConnected') : $t('index.Connected')}}</text>
					</view>
				</view>
				<view class="c" style="padding-top: 24rpx;">
					<view  class="text-box">
						<text class="key">{{$t('index.DeviceValidityPeriod')}}:</text>
						<text class="value">{{deviceInfo['validEnd']}}</text>
						<text class="value vend" v-if="deviceInfo['isvalidEnd']">({{$t('index.Expired')}})</text>
					</view>
					<view class="wifi-btns">
						
					</view>
				</view>
			</view>
		</view>
		<view class="device-option-title">
			<text class="t">{{$t('index.DeviceControl')}}</text>
			<text class="t2">&#8594;</text>
			<text class="t">{{$t('device.TimeSynchronizationConfiguration')}}</text>
		</view>
		<view>
			<view class="active-user">
				<text class="t">-- {{ $t('device.RealTimerControl') }} --</text>
			</view>
			<view class="item">
				<view class="label">
					<text class="t">{{$t('device.CurrentTime')}}</text>
					<button size="mini" @click="getDeviceTime">
						{{$t('device.Refresh') }}
					</button>
				</view>
				<view class="input-box input-box-row">
					<picker-date :value="currentDate" :placeholder="$t('device.PleaseSelectTime')" @refresh="(value: string)=> updateProperty('currentDate', value)" ></picker-date>
					<view style="width: 24rpx;"></view>
					<picker-time :value="currentTime" :placeholder="$t('device.PleaseSelectTime')" @refresh="(value: string)=> updateProperty('currentTime', value)"></picker-time>
				</view>
			</view>
			
			<view class="item">
				<view class="label">
					<text class="t">{{$t('device.TimeZone')}}</text>
				</view>
				<view class="input-box">
					<view class="uni-input" @click="showEffectActionSheet"><text class="t">{{currentTimeZone}}</text></view>
				</view>
			</view>
			<view class="space-box"></view>
			<view class="item flex-center">
				<button type="primary" class="btn" size="mini" @click="handleTimeSync">
					{{$t('index.Apply') }}
				</button>
			</view>
		</view>
		

	</scroll-view>
</template>

<script lang="uts">
	import { APIS } from '@/api/config.uts'
	import { routeGoto } from '@/common/router.uts'
	import { useState } from '@/store/index.uts'
	import { request } from '@/utils/http/index'
	
	export default {
		data() {
			return {
				timeZones: [
					{
						key: "China Standard Time",
						name: "中国 (UTC+8)",
						offset: 8
					},					
					{
						key: "Pacific Standard Time",
						name: "美国 (UTC-8)",
						offset: -8
					}, 
					{
						key: "Tokyo Standard Time",
						name: "日本 (UTC+9)",
						offset: 9
					}, 
					{
						key: "Korea Standard Time",
						name: "韩国 (UTC+9)",
						offset: 9
					}, 
				] as UTSJSONObject[],
				userInfo: {} as UTSJSONObject,
				deviceInfo: {} as UTSJSONObject,
				deviceId: 0,
				currentDate: "",
				currentTime: "",
				currentTimeZone: "",
				currentTimeZoneKey:""
			}
		},
		onLoad(): void {
			let that = this
			const { state } = useState();
			if (state.token != '' && state.activeUser['id'] != null) {
				that.userInfo = state.activeUser;
				that.deviceInfo = state.activeDevice;
				const currentDate = new Date().getTime()
				const day = this.deviceInfo['validEnd'] as string;
				const daynum = new Date(day).getTime() as number;
				if(currentDate > daynum){
					that.deviceInfo['isvalidEnd'] = true;
				}else {
					that.deviceInfo['isvalidEnd'] = false;
				}
				
				that.deviceId = that.deviceInfo['id'] as number;
			}
			else {
				uni.showToast({
					icon: 'none',
					title: `请先选择设备`,
				})
			}
			
			uni.setNavigationBarTitle({
				title: this.$t('pages.timeConfiguration')
			});
		},
		onShow() {
			this.getDeviceTime();			
			const defl = uni.getStorageSync('language') as string
			switch(defl) {
				case "zh-CN":
					this.currentTimeZoneKey = "China Standard Time";
					break;
				case "en":
					this.currentTimeZoneKey = "Pacific Standard Time";
					break;
				case "kr":
					this.currentTimeZoneKey = "Korea Standard Time";
					break;
				case "jp":
					this.currentTimeZoneKey = "Tokyo Standard Time";
					break;
			}
			
			this.currentTimeZone = this.timeZones.find(c => c.getString('key') == this.currentTimeZoneKey)?.getString('name')!;
		},
		methods: {
			handleRouteGoto(url: string){
				routeGoto(url)
			},
			showEffectActionSheet() {
				const options: ShowActionSheetOptions = {
					title: $t('device.TimeZone'),
					itemList: this.timeZones.map((c: UTSJSONObject) => c.getString('name')!),
					success: (res) => {
						const selectedIndex = res.tapIndex;
						const oldOffset = this.timeZones.find(c=>c.key == this.currentTimeZoneKey)!.offset as number;
						const newOffset = this.timeZones[selectedIndex].getNumber('offset')!;
						this.updateCurrentDate(oldOffset, newOffset);
						this.currentTimeZoneKey = this.timeZones[selectedIndex].getString('key')!;
						this.currentTimeZone = this.timeZones[selectedIndex].getString('name')!;
					},
					fail: (error) => {
						console.log(error);
					}
				}
				uni.showActionSheet(options)
			},
			updateProperty(propertyName: string, proValue: string){
				this.$data[propertyName] = proValue;
			},
			async handleTimeSync() {
				try {
					uni.showLoading({
						title: ''
					});
					const controlData = {
						deviceId: this.deviceInfo['snCode'],
						timezone: this.currentTimeZoneKey,
						currentDate: `${this.currentDate} ${this.currentTime}`,
						syncMode: "manual",
						userAccount: this.deviceInfo['userAccount']
					};

					const dataObj = {
						cmd: 'CMD|Time|',
						data: JSON.stringify(controlData),
						deviceSnCode: this.deviceInfo['snCode']
					} as UTSJSONObject
					
					const res = await request("POST", APIS.sendCMD as string, dataObj) as boolean;
					if(!res) {
						uni.showToast({
							icon: 'none',
							title: `设备：${this.deviceInfo['snCode']} 时间同步命令执行失败`,
							success: () => { 
							}
						})
						return;
					}
					
					const apiUrl = APIS.timeSyncConfig.getString('save')!;
					await request("POST", apiUrl, controlData);
					uni.showToast({
						icon: 'none',
						title: `设备：${this.deviceInfo['snCode']} 时间同步成功`,
						success: () => {
							
						}
					})
					
					uni.hideLoading();
				} catch (err){
					uni.hideLoading();
					const errObj = JSON.parse(JSON.stringify(err)) as UTSJSONObject;
					console.log(errObj);
					uni.showToast({
						icon: 'none',
						title: `${errObj.message}`,
						duration: 3000,
					})
				}
			},
			async getDeviceTime() {
				try {
					uni.showLoading({
						title: ''
					});
						
					const dataObj = {
						cmd: 'CMD|SyncTime|',
						data: 'Current',
						deviceSnCode: this.deviceInfo['snCode']
					} as UTSJSONObject
					
					const res = await request("POST", APIS.sendCMD as string, dataObj) as boolean;
					if(!res) {
						uni.showToast({
							icon: 'none',
							title: `设备：${this.deviceInfo['snCode']} 同步时间命令执行失败`,
							duration: 3000,
							success: () => { 
							}
						})
						return;
					}
					
					const apiUrl = APIS.deviceInfo as string;
					
					const result = await request("GET", apiUrl +  this.deviceId, {}) as UTSJSONObject;
					this.deviceInfo = result;
					let currentDataTime = this.deviceInfo['currentDataTime'];
					if(currentDataTime == null) {
						const offset = this.timeZones.find(c=>c.key == this.currentTimeZoneKey)!.offset as number;
						const nowDate = new Date().getTime();
						const localDate = new Date(nowDate + offset * 60 * 60000);
						this.currentDate = `${localDate.getFullYear()}-${localDate.getMonth() + 1}-${localDate.getDate()}`;
						this.currentTime = (localDate.getHours() >= 10 ? `${localDate.getHours()}` : `0${localDate.getHours()}`) + ':' + (localDate.getMinutes() >= 10 ? `${localDate.getMinutes()}` : `0${localDate.getMinutes()}`) + ':' + (localDate.getSeconds()>= 10 ? `${localDate.getSeconds()}` : `0${localDate.getSeconds()}`)
					}
					else{						
						this.currentDate = (currentDataTime as string).split(" ")[0];
						this.currentTime = (currentDataTime as string).split(" ")[1];
						const offset = this.timeZones.find(c=>c.key == this.currentTimeZoneKey)!.offset as number;
						this.updateCurrentDate(0, offset);
					}
					
					uni.hideLoading();
				} catch (err : Error){
					uni.hideLoading();
					const errObj = JSON.parse(JSON.stringify(err)) as UTSJSONObject;
					uni.showToast({
						icon: 'none',
						title: `${errObj.message}`,
						duration: 3000,
					})
				}
			},
			updateCurrentDate(oldOffset: number, newOffset: number) {
				const localDate = new Date(`${this.currentDate} ${this.currentTime}`).getTime();
				const utcDate = localDate - oldOffset * 60 * 60000;
				const newDate = new Date(utcDate + newOffset * 60 * 60000);
				this.currentDate = `${newDate.getFullYear()}-${newDate.getMonth() + 1}-${newDate.getDate()}`;
				this.currentTime = (newDate.getHours() >= 10 ? `${newDate.getHours()}` : `0${newDate.getHours()}`) + ':' + (newDate.getMinutes() >= 10 ? `${newDate.getMinutes()}` : `0${newDate.getMinutes()}`) + ':' + (newDate.getSeconds()>= 10 ? `${newDate.getSeconds()}` : `0${newDate.getSeconds()}`)
			}
		}
	}
</script>

<style lang="scss">
	.device-info {
		padding: 0 36rpx;
		.item{
			background-color: $uni-bg-color;
			border-radius: $uni-border-radius-lg;
			padding: 16rpx 24rpx;
			margin: 0 0 36rpx 0;
			.c{
				flex-direction: row;
				align-items: center;
				justify-content: space-between;
				padding: 8rpx 0;
				.text-box{
					flex-direction: row;
					align-items: center;
					justify-content: flex-start;
				}
				.text-box,
				.text-box-v{
					.wifi-t1{
						font-size: 32rpx;
					}
					.key{
						font-size: 24rpx;
						color: $uni-text-color-placeholder;
						margin-right: 16rpx;
					}
					.value{
						font-size: 24rpx;
						color: $uni-text-color;
					}
					.value.active{
						color: $uni-color-primary;
					}
					.value.vend{
						color: $uni-color-warning;
					}
				}
				.text-box-v{
					.key{
						text-align: center;
						margin-right: 0;
					}
					.value{
						text-align: center;
						font-weight: bold;
						padding-top: 12rpx
					}
				}
				.wi{
					background-color: beige;
					padding: 12rpx;
					border-radius: 12rpx;
				}
				.wi2{
					background-color: $uni-color-primary;
					padding: 12rpx;
					border-radius: 12rpx;
				}
				
				.wifi-btns{
					.btn{
						// border-radius: 120rpx;
						border: none;
						color: $uni-text-color-inverse;
						font-size: 28rpx;
						background-color: $uni-bg-color-blue;
					}
					.btn.del{
						color: $uni-color-error;
						background-color: $uni-text-color-inverse;
						border: 1px solid #f9f9f9;
					}
				}
			}
		}
	}
	.device-option-title{
		flex-direction: row;
		align-items: center;
		justify-content: flex-start;
		padding: 24rpx 36rpx;
		.t{
			font-size: $uni-font-size-sm;
			color: $uni-color-title;
		}
		.t2{
			font-size: $uni-font-size-sm;
			color: $uni-color-grey2;
			margin: 0 18rpx;
		}
	}
	.item{
		padding: 18rpx 36rpx;
		.label{
			display: flex;
			flex-direction: row;
			justify-content: space-between;
			.t{
				font-size: $uni-font-size-base;
			}
		}
		.input-box{
			padding-top: 18rpx;
			.uni-input{
				padding: 18rpx;
				border-radius: $uni-border-radius-lg;
				border: 1px solid;
				border-color: $uni-color-grey2;
			}
		}
		.input-box.input-box-row{
			flex-direction: row;
			align-items: center;
			justify-content: space-between;
		}
		.btn {
			width: 120rpx;
		}
	}
	
	.flex-center {
		display: flex;
		flex-direction: row;
		justify-content: center;
	}
	
</style>
