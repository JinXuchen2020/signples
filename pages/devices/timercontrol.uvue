<template>
	<scroll-view :bounces="false" class="app">
		<form class="defalut-form" @submit="onFormSubmit">
			<view class="item" v-if="formData.controlType == 'Brightness'" >
				<view class="label"><text class="t">{{$t('device.BrightnessValue')}}</text></view>
				<view class="input-box">
					<slider
						:value="formData.value" 
						:show-value="true"
						@changing="changing"
						@change="changed"
						foreColor="#007aff"
						></slider>
				</view>
			</view>
			<view class="item" v-if="formData.controlType == 'Volume'" >
				<view class="label"><text class="t">{{$t('device.VolumeValue')}}</text></view>
				<view class="input-box">
					<slider
						:value="formData.value" 
						:show-value="true"
						@changing="changing"
						@change="changed"
						foreColor="#007aff"
						></slider>
				</view>
			</view>
			<view class="item">
				<view class="label"><text class="t">{{ $t('device.RepeatMode') }}</text></view>
				<view class="input-box">
					<view class="uni-input" @click="showEffectActionSheet"><text class="t">{{currentRepeatMode}}</text></view>
				</view>
				<checkbox-group v-if="formData.repeatMode == 'week'" class="checkgroup-flex-row" @change="repeatStringChange">
					<checkbox 
						style="margin: 6px;"
						v-for="(item, index) in weekList" 
						:checked="repeatString.includes(item.key as string)"
						:key="index" 
						:value="item.key">
							<text>{{item.name}}</text>
					</checkbox>
				</checkbox-group>
				<checkbox-group v-if="formData.repeatMode == 'month'" class="checkgroup-flex-row" @change="repeatStringChange">
					<checkbox 
						style="margin: 6px;"
						v-for="(item, index) in dayList" 
						:checked="repeatString.includes(item.key as string)"
						:key="index" 
						:value="item.key">
							<text>{{item.name}}</text>
					</checkbox>
				</checkbox-group>
				<checkbox-group v-if="formData.repeatMode == 'year'" class="checkgroup-flex-row" @change="repeatStringChange">
					<checkbox 
						style="margin: 6px;"
						v-for="(item, index) in monthList" 
						:checked="repeatString.includes(item.key as string)"
						:key="index" 
						:value="item.key">
							<text>{{item.name}}</text>
					</checkbox>
				</checkbox-group>
			</view>
			<view class="item" v-if="formData.controlType == 'Power'">
				<view class="label"><text class="t">{{$t('device.ScheduleTime')}}</text></view>
				<view class="input-box input-box-row">
					<picker-time :value="powerOnTime" :placeholder="$t('device.PleaseSelectTime')" @refresh="(value: string)=> updateProperty('powerOnTime', value)"></picker-time>
					<view style="width: 24rpx;"></view>
					<picker-time :value="powerOffTime" :placeholder="$t('device.PleaseSelectTime')" @refresh="(value: string)=> updateProperty('powerOffTime', value)"></picker-time>
				</view>
			</view>
			<view class="item" v-else>
				<view class="label"><text class="t">{{$t('device.ScheduleTime')}}</text></view>
				<view class="input-box">
					<picker-time :value="executeTime" :placeholder="$t('device.PleaseSelectTime')" @refresh="(value: string)=> updateProperty('executeTime', value)"></picker-time>
				</view>
			</view>
			<view class="item">
				<view class="label"><text class="t">{{$t('device.ValidTime')}}</text></view>
				<view class="input-box input-box-row">
					<picker-date :value="formData.validDateStart" :delimiter="'/'" :placeholder="$t('device.PleaseSelectStartDate')" @refresh="(value: string)=> updateProperty('validDateStart', value)" ></picker-date>
					<view style="width: 24rpx;"></view>
					<picker-date :value="formData.validDateEnd" :delimiter="'/'" :placeholder="$t('device.PleaseSelectEndDate')" @refresh="(value: string)=> updateProperty('validDateEnd', value)"></picker-date>
				</view>
			</view>
			<view class="item">
				<button class="btn btn-submit" form-type="submit" type="primary">{{$t('index.Save')}}</button>
			</view>
		</form>
	</scroll-view>
</template>

<script lang="uts">
	import { APIS } from '@/api/config.uts'
	import { routeGoto } from '@/common/router.uts'
	import { request } from '@/utils/http/index'
	import { useState } from '@/store/index.uts'
	export default {
		data() {
			return {
				controlId: '',
				controlType: '',
				deviceInfo:{} as UTSJSONObject,
				formData: {} as UTSJSONObject,
				repeatModes: [
					{
						key: "day",
						name: $t('device.PerDay')
					},					
					{
						key: "week",
						name: $t('device.PerWeek'),
					}, 
					{
						key: "month",
						name: $t('device.PerMonth'),
					}, 
					{
						key: "year",
						name: $t('device.PerYear'),
					}, 
				] as UTSJSONObject[],
				weekList: [
					{
						key: "Sunday",
						name: $t('device.Sunday')
					},					
					{
						key: "Monday",
						name: $t('device.Monday'),
					}, 
					{
						key: "Tuesday",
						name: $t('device.Tuesday'),
					}, 
					{
						key: "Wednesday",
						name: $t('device.Wednesday'),
					}, 
					{
						key: "Thursday",
						name: $t('device.Thursday'),
					}, 
					{
						key: "Friday",
						name: $t('device.Friday'),
					}, 
					{
						key: "Saturday",
						name: $t('device.Saturday'),
					},
				] as UTSJSONObject[],
				dayList: [] as UTSJSONObject[],
				monthList: [
					{
						key: "January", name: $t('device.January')
					},					
					{
						key: "February", name: $t('device.February')
					}, 
					{
						key: "March", name: $t('device.March')
					}, 
					{
						key: "April", name: $t('device.April')
					}, 
					{
						key: "May", name: $t('device.May')
					}, 
					{
						key: "June", name: $t('device.June')
					}, 
					{
						key: "July", name: $t('device.July')
					},
					{
						key: "August", name: $t('device.August')
					},
					{
						key: "September", name: $t('device.September')
					},
					{
						key: "October", name: $t('device.October')
					},
					{
						key: "November", name: $t('device.November')
					},
					{
						key: "December", name: $t('device.December')
					},
				] as UTSJSONObject[],
				currentRepeatMode:'',
				repeatString:'',
				executeTime: '00:00:00',
				powerOnTime: '00:00:00',
				powerOffTime: '00:00:00',
			};
		},
		onLoad(e: OnLoadOptions) {
			this.controlId = e['control_id'] as string;
			this.controlType = e['control_type'] as string;
			const { state } = useState();
			this.deviceInfo = state.activeDevice;
			if(this.controlId != "-1") {
				this.getDeviceControlInfo();
			}
			else {
				this.formData = {
					controlType: this.controlType,
					repeatMode: 'day',
					validDateStart: '',
					validDateEnd:'',
					value: 0,
					deviceId: this.deviceInfo['snCode'],
					executionType: "SCHEDULED",
					isEnabled: 0,
					userAccount: this.deviceInfo['userAccount']					
				}
				
				this.currentRepeatMode = this.repeatModes.find(c => c.getString('key') == this.formData.getString('repeatMode'))?.getString('name')!;
			}
			
			console.log(this.formData);
			this.dayList = [] as UTSJSONObject[]
			for (let i = 0; i < 30; i++) {
				this.dayList.push({
					key: (i+1).toString(),
					name: (i+1).toString()
				} as UTSJSONObject)
			}
		},
		methods: {
			async getDeviceControlInfo() {
				try {
					uni.showLoading({
						title: ''
					});
					const apiUrl = APIS.deviceControl.getString('getById')!;
					const result = await request('GET', apiUrl.replace("{id}", `${this.controlId}`), {}) as UTSJSONObject;
					console.log(result);
					this.formData = result as UTSJSONObject;
					const executionString = result.getString('execution')!;
					if (executionString.includes("|")) {						
						this.executeTime = result.getString('execution')!.split('|')[1];
						this.repeatString = result.getString('execution')!.split('|')[0];
					}else {						
						this.executeTime = executionString;
						this.repeatString = '';
					}
					
					if(this.formData.controlType == "Power") {
						this.powerOnTime = this.executeTime.split('-')[0];
						this.powerOffTime = this.executeTime.split('-')[1];
					}
										
					this.currentRepeatMode = this.repeatModes.find(c => c.getString('key') == this.formData.getString('repeatMode'))?.getString('name')!;
					
					uni.hideLoading();
				} catch (err){
					uni.hideLoading();
					const errObj = JSON.parse(JSON.stringify(err)) as UTSJSONObject;
					console.log(errObj);
					uni.showToast({
						icon: 'none',
						title: `${errObj.message}`,
						duration: 3000,
					})
				}
			},
			async repeatStringChange(e: CheckboxGroupChangeEvent) {
				console.log(e.detail);
				this.repeatString = e.detail.value.map(c => `${c}#`).join('');
				console.log(this.repeatString);
			},
			changing(event: UniSliderChangeEvent){
				this.formData.value = event.detail.value
			},
			changed(event: UniSliderChangeEvent){
				this.formData.value = event.detail.value
			},
			updateProperty(propertyName: string, proValue: string){
				if(this.formData.hasOwnProperty(propertyName)){					
					this.formData[propertyName] = proValue;
				}
				else {
					this.$data[propertyName] = proValue;
				}
			},
			async onFormSubmit(){
				if(this.formData.repeatMode == '' || this.formData.executeTime == '' || this.executeTime == '' || this.formData.validDateStart == '' || this.formData.validDateEnd == ''){
					uni.showToast({
						icon: 'none',
						title: $t("error.TimerControlPrompt"),
						duration: 3000,
						success: () => {
						}
					})
				}else{
					try {
						uni.showLoading({
							title: ''
						});
						
						const controlData = {
							...this.formData,
							execution: this.getExecuteTime(),
						};
						
						console.log(controlData);
						
						const apiUrl = APIS.deviceControl.getString('save')!;
						await request("POST", apiUrl, controlData);
						
						uni.showToast({
							icon: 'none',
							title: $t("error.TimerControlSaveSuccess"),
							duration: 2000,
						})
						
						uni.hideLoading();
						uni.navigateBack();
					} catch (err){
						uni.hideLoading();
						const errObj = JSON.parse(JSON.stringify(err)) as UTSJSONObject;
						console.log(errObj);
						uni.showToast({
							icon: 'none',
							title: `${errObj.message}`,
							duration: 3000,
						})
					}
				}
			},
			showEffectActionSheet() {
				const options: ShowActionSheetOptions = {
					title: $t('device.RepeatMode'),
					itemList: this.repeatModes.map((c: UTSJSONObject) => c.getString('name')!),
					success: (res) => {
						const selectedIndex = res.tapIndex;
						this.formData!.repeatMode = this.repeatModes[selectedIndex].getString('key')!;
						this.currentRepeatMode = this.repeatModes[selectedIndex].getString('name')!;
						this.repeatString = '';
					},
					fail: (error) => {
						console.log(error);
					}
				}
				uni.showActionSheet(options)
			},
			getExecuteTime(){
				if(this.formData.controlType == "Power") {
					this.executeTime = `${this.powerOnTime}-${this.powerOffTime}`;
				}
				
			    switch (this.formData.repeatMode)
			    {
			        case "week":
			        case "month":
			        case "year":
			            return `${this.repeatString}|${this.executeTime}`;
			        default:
			            return this.executeTime;
			    }
			}
		}
	}
</script>

<style lang="scss">
	.defalut-form{
		padding: 18rpx 36rpx;
		.item{
			padding: 18rpx 0;
			.label{
				.t{
					font-size: $uni-font-size-base;
				}
			}
			.input-box{
				padding-top: 18rpx;
				.uni-input{
					padding: 18rpx;
					border-radius: $uni-border-radius-lg;
					border: 1px solid;
					border-color: $uni-color-grey2;
				}
			}
			.input-box.input-box-row{
				flex-direction: row;
				align-items: center;
				justify-content: space-between;
			}
		}
		
	}
	.form{
		.selected-day{
			flex-direction: row;
			align-items: center;
			justify-content: center;
			.t{
				font-size: $uni-font-size-base;
			}
		}
		.picker-view {
		    width: 100%;
		    height: 220px;
			.item {
				height: 50px;
				.text {
					line-height: 50px;
					text-align: center;
				}
			}
		}
	}
	.checkgroup-flex-row {
		display: flex;
		flex-direction: row;
		flex-wrap: wrap;
		
	}
</style>
