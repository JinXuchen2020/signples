<template>
	<view class="app">
		<view class="space-box"></view>
		<view class="device-info">
			<view class="item shadow" v-if="deviceInfo.hasOwnProperty('id')">
				<view class="c" style="padding-bottom: 24rpx;justify-content: flex-start;">
					<view v-if="deviceInfo['connectStatus'] == 1" class="icon-box icon-box-big wi2">
						<image class="icon" src="/static/icon/2-w.png" mode="widthFix"></image>
					</view>
					<view v-else class="icon-box icon-box-big wi">
						<image class="icon" src="/static/icon/2.png" mode="widthFix"></image>
					</view>
					<view>
						<view>
							<text class="wifi-t1">{{deviceInfo['name']}}</text>
						</view>
						<view class="text-box">
							<text class="key">SN:</text>
							<text class="value">{{deviceInfo['snCode']}}</text>
						</view>
					</view>
				</view>
				<view class="c" style="background-color: #f9f9f9;border-radius: 12rpx;padding: 24rpx;">
					<view class="text-box-v">
						<text class="key">{{$t("index.Resolution")}}</text><text class="value">{{deviceInfo['width']}}*{{deviceInfo['height']}}</text>
					</view>
					<view class="text-box-v">
						<text class="key">{{$t("index.Status")}}</text> 
						<text class="value" :class="{active: deviceInfo['status'] == '1'}">{{deviceInfo['status'] == '0' ? $t("index.Inactive") : $t("index.Activate")}}</text>
					</view>
					<view class="text-box-v">
						<text class="key">{{$t("index.ConnectionStatus")}}</text> 
						<text class="value" :class="{active: deviceInfo['connectStatus'] == 1}">{{deviceInfo['connectStatus'] == 0 ? $t("index.NotConnected") :  $t("index.Connected")}}</text>
					</view>
				</view>
				<view class="c" style="padding-top: 24rpx;">
					<view  class="text-box">
						<text class="key">{{$t('index.DeviceValidityPeriod')}}:</text>
						<text class="value">{{deviceInfo['validEnd']}}</text>
						<text class="value vend" v-if="deviceInfo['isvalidEnd']">({{$t('index.Expired')}})</text>
					</view>
					<view class="wifi-btns">
						
					</view>
				</view>
			</view>
		</view>
		<view class="device-option-title">
			<text class="t">{{$t('index.DeviceControl')}}</text>
		</view>
		<view class="list-box">
			<view class="uc-menus">
				<view class="uc-menus-item" @click="handleRouteGoto('/pages/devices/editbrightness');">
					<view class="uc-menus-item-title">
						<text>{{$t('device.BrightnessAdjustment')}}</text>
					</view>
					<view class="icon-box">
						<image class="icon" src="/static/svg/right.png" mode="widthFix"></image>
					</view>
				</view>
				<view class="uc-menus-item" @click="handleRouteGoto('/pages/devices/volume');">
					<view class="uc-menus-item-title">
						<text>{{$t('device.VolumeAdjustment')}}</text>
					</view>
					<view class="icon-box">
						<image class="icon" src="/static/svg/right.png" mode="widthFix"></image>
					</view>
				</view>
				<view class="uc-menus-item" @click="handleRouteGoto('/pages/devices/edittime');">
					<view class="uc-menus-item-title">
						<text>{{$t('device.TimeSynchronizationConfiguration')}} </text>
					</view>
					<view class="icon-box">
						<image class="icon" src="/static/svg/right.png" mode="widthFix"></image>
					</view>
				</view>
				<view class="uc-menus-item" @click="handleRouteGoto('/pages/devices/restart');">
					<view class="uc-menus-item-title">
						<text>{{$t('device.Restart')}}</text>
					</view>
					<view class="icon-box">
						<image class="icon" src="/static/svg/right.png" mode="widthFix"></image>
					</view>
				</view>
				<view class="uc-menus-item" @click="handleRouteGoto('/pages/devices/poweroffon');">
					<view class="uc-menus-item-title">
						<text> {{$t('device.Power')}}</text>
					</view>
					<view class="icon-box">
						<image class="icon" src="/static/svg/right.png" mode="widthFix"></image>
					</view>
				</view>
			</view>			
		</view>
		
		<view class="cg-btns-box">
			<button class="btn defaultyle" :class="{upgrade: deviceInfo['connectStatus'] == 1}" size="mini"  @click="handleUpgrade(deviceInfo)">
				{{deviceInfo['status'] == 0 ? $t('index.Activate') : $t('device.Upgrade')}}
			</button>
			<button class="btn defaultyle" :class="{stopdevice: deviceInfo['connectStatus'] == 1}" size="mini"  @click="handleStop(deviceInfo)">
				{{$t('device.Deactivate')}}
			</button>
			<button v-if="deviceInfo['status'] == 1" class="btn defaultyle" size="mini" @click="handleDelete(deviceInfo)">
				{{$t('device.Delete')}}
			</button>
		</view>
	</view>
</template>

<script lang="uts">
	import { APIS } from '@/api/config.uts'
	import { routeGoto } from '@/common/router.uts'
	import { request } from '@/utils/http/index'
	import { useState } from '@/store/index.uts'
	
	export default {
		data() {
			return {
				userInfo: {} as UTSJSONObject,
				deviceInfo: {} as UTSJSONObject,
				deviceId: 0
			}
		},
		onLoad(): void {
			uni.setNavigationBarTitle({
				title: this.$t('pages.deviceManagement')
			});
		},
		onShow() {
			let that = this
			const { state } = useState();
			if (state.token != '' && state.activeUser['id'] != null) {
				that.userInfo = state.activeUser;
				that.deviceInfo = state.activeDevice;
				const currentDate = new Date().getTime()
				const day = this.deviceInfo['validEnd'] as string;
				const daynum = new Date(day).getTime() as number;
				if(currentDate > daynum && currentDate - daynum > 24 * 60 * 60 * 1000){
					that.deviceInfo['isvalidEnd'] = true;
				}else {
					that.deviceInfo['isvalidEnd'] = false;
				}
				
				that.deviceId = that.deviceInfo['id'] as number;
			}
			else {
				uni.showModal({
					title: $t("error.SelectDevice"),
					success: (res: UniShowModalResult) => {
						if(res.confirm){
							routeGoto('/pages/index/devices');
						}
					}
				})
			}
		},
		methods: {
			handleRouteGoto(url: string){
				routeGoto(url)
			},
			async handleDelete(device: UTSJSONObject){
				uni.showModal({
					title: $t("error.ConfirmToDeleteDevice"),
					confirmText: $t("index.Confirm"),
					cancelText: $t("index.Cancel"),
					success: (res: UniShowModalResult) => {
						if(res.confirm){							
							try {
								uni.showLoading({
									title: ''
								});
								
								const person: UTSJSONObject = {}
								const param = device.id;
								request('DELETE', APIS.deleteDevice as string + param, person).then(()=> {									
									uni.hideLoading();
									uni.navigateBack();
								})
							} catch (err){
								uni.hideLoading();
								const errObj = JSON.parse(JSON.stringify(err)) as UTSJSONObject;
								console.log(errObj);
								uni.showToast({
									icon: 'none',
									title: `${errObj.message}`,
									duration: 3000,
								})
							}
						}
					}
				})
			},
			handleUpgrade(device: UTSJSONObject){
				if(device['connectStatus'] != 1){
					uni.showToast({
						icon: 'none',
						title: $t("error.NotConnected"),
						duration: 2000,
						success: () => {							
						}
					})
				}else {
					if(this.deviceInfo['status'] == 0) {
						uni.showModal({
							title: $t("error.ActivateDevice"),
							confirmText: $t("index.Confirm"),
							cancelText: $t("index.Cancel"),
							success: (res: UniShowModalResult) => {
								if(res.confirm){								
									try {
										uni.showLoading({
											title: ''
										});
										
										request("PUT", APIS.updateDevice as string, {
												id: this.deviceId,
												status: 1
											}).then(() => {
												uni.showToast({
													icon: 'none',
													title: `${$t("index.Device")}：${this.deviceInfo['snCode']} ${$t("error.ActivateSuccess")}`,
													duration: 3000,
												})
											});
										
									} catch (err){
										uni.hideLoading();
										const errObj = JSON.parse(JSON.stringify(err)) as UTSJSONObject;
										console.log(errObj);
										uni.showToast({
											icon: 'none',
											title: `${errObj.message}`,
											duration: 3000,
										})
									}
								}
							}
						})
					}
					else {
						routeGoto('/pages/devices/create?device_id=' + this.deviceId);
					}
					
				}
			},
			handleStop(device: UTSJSONObject){
				if(device['connectStatus'] != 1){
					uni.showToast({
						icon: 'none',
						title: $t("error.NotConnected"),
						duration: 2000,
						success: () => {
							
						}
					})
				}else{
					uni.showModal({
						title: $t("error.DisableDevice"),
						confirmText: $t("index.Confirm"),
						cancelText: $t("index.Cancel"),
						success: (res: UniShowModalResult) => {
							if(res.confirm){
								
								try {
									uni.showLoading({
										title: ''
									});
									request("PUT", APIS.updateDevice as string, {
											id: this.deviceId,
											enabled: 0
										}).then(() => {
											uni.showToast({
												icon: 'none',
												title: `${$t("index.Device")}：${this.deviceInfo['snCode']} ${$t("error.DisableSuccess")}`,
												duration: 3000,
											})
										});									
								} catch (err){
									uni.hideLoading();
									const errObj = JSON.parse(JSON.stringify(err)) as UTSJSONObject;
									console.log(errObj);
									uni.showToast({
										icon: 'none',
										title: `${errObj.message}`,
										duration: 3000,
									})
								}
							}
						}
					})
				}
			}
		}
	}
</script>

<style lang="scss">
	.device-info {
		padding: 0 36rpx;
		.item{
			background-color: $uni-bg-color;
			border-radius: $uni-border-radius-lg;
			padding: 16rpx 24rpx;
			margin: 0 0 36rpx 0;
			.c{
				flex-direction: row;
				align-items: center;
				justify-content: space-between;
				padding: 8rpx 0;
				.text-box{
					flex-direction: row;
					align-items: center;
					justify-content: flex-start;
				}
				.text-box,
				.text-box-v{
					.wifi-t1{
						font-size: 32rpx;
					}
					.key{
						font-size: 24rpx;
						color: $uni-text-color-placeholder;
						margin-right: 16rpx;
					}
					.value{
						font-size: 24rpx;
						color: $uni-text-color;
					}
					.value.active{
						color: $uni-color-primary;
					}
					.value.vend{
						color: $uni-color-warning;
					}
				}
				.text-box-v{
					.key{
						text-align: center;
						margin-right: 0;
					}
					.value{
						text-align: center;
						font-weight: bold;
						padding-top: 12rpx
					}
				}
				.wi{
					background-color: beige;
					padding: 12rpx;
					border-radius: 12rpx;
				}
				.wi2{
					background-color: $uni-color-primary;
					padding: 12rpx;
					border-radius: 12rpx;
				}
				
				.wifi-btns{
					.btn{
						// border-radius: 120rpx;
						border: none;
						color: $uni-text-color-inverse;
						font-size: 28rpx;
						background-color: $uni-bg-color-blue;
					}
					.btn.del{
						color: $uni-color-error;
						background-color: $uni-text-color-inverse;
						border: 1px solid #f9f9f9;
					}
				}
			}
		}
	}
	.device-option-title{
		flex-direction: row;
		align-items: center;
		justify-content: flex-start;
		padding: 24rpx 36rpx;
		.t{
			font-size: $uni-font-size-sm;
			color: $uni-color-title;
		}
		.t2{
			font-size: $uni-font-size-sm;
			color: $uni-color-grey2;
			margin: 0 18rpx;
		}
	}
	.list-box{
		padding: 0 32rpx;
		.uc-menus{
			border-radius: $uni-border-radius-lg;
			background-color: $uni-bg-color;
			padding: 0rpx 32rpx;
			border-radius: $uni-border-radius-lg;
			
			.uc-menus-item{
				flex-direction: row;
				align-items: center;
				justify-content: space-between;
				border-bottom: 1px solid #eeeeee;
				padding: 32rpx 0rpx;
				.uc-menus-item-title{
					flex-direction: row;
					align-items: center;
					justify-content: flex-start;
				}
				.icon-box{
					margin-right: 0 !important;
				}
				.input-box{
					.t{
						font-size: 24rpx;
					}
				}
			}
			.uc-menus-item.end{
				border: none;
			}
			.uc-menus-item-2{
				width: 100%;
				padding: 0rpx 0rpx 32rpx 0;
				border-bottom: 1px solid #eeeeee;
				flex-direction: row;
				align-items: center;
				justify-content: space-between;
			}
		}
	}
	.cg-btns-box{
		width: 100%;
		padding: 24rpx 36rpx;
		flex-direction: row;
		align-items: center;
		justify-content: space-between;
		background-color: $uni-bg-color;
		border-top: 1px solid #eeeeee;
		position: fixed;
		bottom: 0;
		left: 0;
		
		.upgrade{
			width: 31.4%;
			color: $uni-text-color-inverse;
			background-color: $uni-color-primary;
			border: 1px solid $uni-color-primary;
		}
		.stopdevice{
			width: 31.4%;
			color: $uni-text-color-inverse;
			background-color: $uni-color-error;
			border: 1px solid $uni-color-error;
		}
		.defaultyle{
			width: 31.4%;
			color: $uni-text-color-placeholder;
			background-color: $uni-bg-color;
			border: 1px solid $uni-text-color-placeholder;
		}
	}
	
</style>
