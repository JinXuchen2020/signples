<template>
	<scroll-view class="app">
		<form class="defalut-form" @submit="onFormSubmit">
			<view class="item">
				<view class="label"><text class="t">{{ $t('device.DisplayName') }}</text></view>
				<view class="input-box">
					<input class="uni-input shadow" name="name" v-model="name" :placeholder="$t('device.PleaseEnterDisplayName')" maxlength="-1" />
				</view>
			</view>
			<view class="item">
				<view class="label"><text class="t">{{$t('device.SN')}}</text></view>
				<view class="input-box">
					<input class="uni-input shadow" name="snCode" v-model="snCode" :placeholder="$t('device.PleaseEnterSNCode')" maxlength="-1" />
				</view>
			</view>
			<view class="item">
				<view class="label"><text class="t">{{$t('index.Resolution')}}</text></view>
				<view class="input-box input-box-row">
					<input class="uni-input shadow" name="width" type="number" v-model="width" :placeholder="$t('device.PleaseEnterWidth')" maxlength="-1" />
					<view style="width: 24rpx;"></view>
					<input class="uni-input shadow" name="height" type="number" v-model="height" :placeholder="$t('device.PleaseEnterHeight')" maxlength="-1" />
				</view>
			</view>

			<view class="item">
				<view class="label"><text class="t">{{$t('device.DeviceValidityPeriod')}}</text></view>
				<view class="input-box input-box-row">
					<input 
						class="uni-input shadow" 
						:disabled="true" 
						name="validStart" 
						v-model="validStart" 
						:placeholder="$t('device.PleaseSelectStartDate')" 
						maxlength="-1" 
						@click="acticeField='validStart'; popupDate = true;" />
					<view style="width: 24rpx;"></view>
					<input 
						class="uni-input shadow" 
						:disabled="true" 
						name="validEnd" 
						v-model="validEnd" 
						:placeholder="$t('device.PleaseSelectEndDate')"  
						maxlength="-1" 
						@click="acticeField='validEnd';popupDate = true;" />
				</view>
			</view>
			
			<view class="item">
				<view class="label"><text class="t">{{$t('index.ContactName')}}</text></view>
				<view class="input-box">
					<input class="uni-input shadow" name="contactName" v-model="contactName" :placeholder="$t('device.PleaseEnterContactName')"   maxlength="-1" />
				</view>
			</view>
			<view class="item">
				<view class="label"><text class="t">{{$t('index.ContactPhone')}}</text></view>
				<view class="input-box">
					<input class="uni-input shadow" name="contactPhone" v-model="contactPhone" :placeholder="$t('device.PleaseEnterContactPhone')" maxlength="-1" />
				</view>
			</view>
			<view class="item">
				<button class="btn btn-submit" form-type="submit" type="primary">{{$t('index.Save')}}</button>
			</view>
		</form>
		<!-- popup -->
		<popup-default
			v-model:visible="popupDate"
			:title="$t('device.PleaseSelectDate')"
			show-icon
			icon-src=""
			@confirm="handleValidDate()"
			>
			<view class="form">
				<view class="selected-day">
					<text class="t">{{$t('device.SelectedDate')}}：</text>
					<text class="t">{{year}}{{$t('device.Year')}}{{month}}{{$t('device.Month')}}{{day}}{{$t('device.Day')}}</text>
				</view>
				<view class="space-box"></view>
				 <picker-view class="picker-view" :value="value" @change="bindChange" :indicator-style="indicatorStyle"
				      :indicator-class="indicatorClass" :mask-style="maskStyle" :mask-class="maskClass" :mask-top-style="maskTopStyle"
				      :mask-bottom-style="maskBottomStyle">
				      <picker-view-column class="picker-view-column">
				        <view class="item" v-for="(item,index) in years" :key="index"><text class="text">{{item}}{{$t('device.Year')}}</text></view>
				      </picker-view-column>
				      <picker-view-column class="picker-view-column">
				        <view class="item" v-for="(item,index) in months" :key="index"><text class="text">{{item}}{{$t('device.Month')}}</text>
				        </view>
				      </picker-view-column>
				      <picker-view-column class="picker-view-column">
				        <view class="item" v-for="(item,index) in days" :key="index"><text class="text">{{item}}{{$t('device.Day')}}</text></view>
				      </picker-view-column>
				    </picker-view>
			</view>
		</popup-default>
		<!-- popup -->
	</scroll-view>
</template>

<script lang="uts">
	import { APIS } from '@/api/config.uts'
	export default {
		data() {
			const _years : number[] = []
			const _year = 2030
			const _months : number[] = []
			const _month : number = 1
			const _days : number[] = []
			const _day = 12
			for (let i = 2025; i <= _year; i++) {
				_years.push(i)
			}
			for (let i = 1; i <= 12; i++) {
				_months.push(i)
			}
			for (let i = 1; i <= 31; i++) {
				_days.push(i)
			}
			return {
				userInfo: {} as UTSJSONObject,
				token: '' as String,
				popupDate: false,
				acticeField: 'validStart',
				name: '' as string,
				snCode: '' as string,
				width: '' as string,
				height: '' as string,
				validStart: '' as string,
				validEnd: '' as string,
				contactName: '' as string,
				contactPhone: '' as string,
				formData: {} as UTSJSONObject,
				years: _years as number[],
				year: _year as number,
				months: _months as number[],
				month: _month as number,
				days: _days as number[],
				day: _day as number,
				value: [_year - 2025, _month - 1, _day - 1] as number[],
				result: [] as number[],
				indicatorStyle: 'height: 50px;',
				indicatorClass: '',
				maskStyle: '',
				maskClass: '',
				maskTopStyle: '',
				maskBottomStyle: ''
			}
		},
		onLoad() {
			uni.setNavigationBarTitle({
				title: this.$t('pages.addDevice')
			});
		},
		onShow() {
			let that = this
			//获取当前有没有用户登录
			uni.getStorage({
			  key: 'token',
			  success: function(res) {
				  console.log('token res', res)
				  const token = res.data ?? '';
				  if(token !== ''){
					  that.token = token as String;
					  console.log('this.token =', that.token)
					  uni.getStorage({
					    key: 'userInfo',
					    success: function(r) {
							console.log(r)
							const userInfo = r.data ?? {};
					  		this.userInfo = userInfo as UTSJSONObject;
					    },
					    fail: function(err) {
					      console.log('读取失败userInfo或不存在', err);
					    }
					  });
				  }
			  },
			  fail: function(err) {
			    console.log('读取失败token或不存在，请先登录', err);
				uni.showModal({
					title: "尚未登录，请您先登录?",
					success: (res: UniShowModalResult) => {
						if(res.confirm){
							uni.switchTab({
								url: '/pages/user/index'
							});
						}
					}
				})
			  }
			});
		},
		methods: {
			onFormSubmit(){
				if(this.name == '' || this.snCode == '' || this.width == '' || this.height == '' || this.validStart == '' || this.validEnd == '' || this.contactName == '' || this.contactPhone == ''){
					uni.showToast({
						icon: 'none',
						title: '字段不能为空',
						duration: 3000,
						success: () => {
						}
					})
				}else{
					try {
						uni.showLoading({
							title: ''
						});
						uni.request({
							url: APIS.createDevice as string,
							method: "POST",
							header: {
								'Authorization': "Bearer " + this.token
							},
							data:{
								name: this.name,
								snCode: this.snCode,
								width: this.width,
								height: this.height,
								validStart: this.validStart,
								validEnd: this.validEnd,
								contactName: this.contactName,
								contactPhone: this.contactPhone,
								userAccount: this.userInfo.account,
								brightness: 10,
								volume: 10,
								status: 0
							},
							success: (res) => {
								console.log('createDevice res', res)
								const result = res.data as UTSJSONObject
								uni.showToast({
									icon: 'none',
									title: result['msg'] as string,
									duration: 2000,
									success: () => {
										this.name = '' as string
										this.snCode = '' as string
										this.width = '' as string
										this.height = '' as string
										this.validStart = '' as string
										this.validEnd = '' as string
										this.contactName =  '' as string
										this.contactPhone = '' as string
									}
								})
								uni.hideLoading();
							},
							fail: () => {
								
							}
						});
						
					} catch (err){
						console.log(err)
					}
				}
			},
			handleValidDate(){
				let that = this
				console.log('this.result=', this.year, this.month, this.day)
				const maxDay = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][this.month - 1];
				if (this.month == 2 && (this.year % 400 == 0 || (this.year % 100 != 0 && this.year % 4 == 0))) {
					if(this.day <= 29){
						//正常
					}else{
						console.log('maxDay', maxDay)
						console.log('2e', this.day)
						uni.showToast({
							icon: 'none',
							title: this.month+'月最后一天是' + maxDay + '日，已为您自动选择',
							duration: 3000,
							success: () => {
								that.day = maxDay
							}
						})
					}
				}else{
					if(this.day <= maxDay){
						//正常
					}else{
						console.log('maxDay', maxDay)
						console.log(this.day)
						uni.showToast({
							icon: 'none',
							title: this.month+'月最后一天是' + maxDay + '日，已为您自动选择',
							duration: 3000,
							success: () => {
								that.day = maxDay
							}
						})
					}
				}
				if(this.acticeField == 'validStart'){
					this.validStart = this.year + '-' + this.month + '-' + this.day
				}else{
					this.validEnd = this.year + '-' + this.month + '-' + this.day
				}
				this.popupDate = false
			},
			bindChange(e : UniPickerViewChangeEvent) {
				const val = e.detail.value
				this.result = val
				this.year = this.years[val[0]]
				this.month = this.months[val[1]]
				this.day = this.days[val[2]]
			}
		}
	}
</script>

<style lang="scss">
	.defalut-form{
		padding: 18rpx 36rpx;
		.item{
			padding: 18rpx 0;
			.label{
				.t{
					font-size: $uni-font-size-base;
				}
			}
			.input-box{
				padding-top: 18rpx;
				.uni-input{
					padding: 18rpx;
					border-radius: $uni-border-radius-lg;
					border: 1px solid;
					border-color: $uni-color-grey2;
				}
			}
			.input-box.input-box-row{
				flex-direction: row;
				align-items: center;
				justify-content: space-between;
			}
		}
		
	}
	.form{
		.selected-day{
			flex-direction: row;
			align-items: center;
			justify-content: center;
			.t{
				font-size: $uni-font-size-base;
			}
		}
		.picker-view {
		    width: 100%;
		    height: 220px;
			.item {
				height: 50px;
				.text {
					line-height: 50px;
					text-align: center;
				}
			}
		}
	}
	
	
</style>
