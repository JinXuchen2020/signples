<template>
	<scroll-view class="app">
		<form class="defalut-form" @submit="onFormSubmit">
			<view class="item">
				<view class="label"><text class="t">{{ $t('device.DisplayName') }}</text></view>
				<view class="input-box">
					<input class="uni-input shadow" name="name" :value="formData.name" :placeholder="$t('device.PleaseEnterDisplayName')" maxlength="-1" @change="(e: UniInputChangeEvent)=> updateProperty('name', e.detail.value)" />
				</view>
			</view>
			<view class="item">
				<view class="label"><text class="t">{{$t('device.SN')}}</text></view>
				<view class="input-box">
					<input class="uni-input shadow" name="snCode" :value="formData.snCode" :placeholder="$t('device.PleaseEnterSNCode')" maxlength="-1" @change="(e: UniInputChangeEvent)=> updateProperty('snCode', e.detail.value)"  />
				</view>
			</view>
			<view class="item">
				<view class="label"><text class="t">{{$t('index.Resolution')}}</text></view>
				<view class="input-box input-box-row">
					<input class="uni-input shadow" name="width" type="number" :value="formData.width" :placeholder="$t('device.PleaseEnterWidth')" maxlength="-1" @change="(e: UniInputChangeEvent)=> updateProperty('width', e.detail.value)"  />
					<view style="width: 24rpx;"></view>
					<input class="uni-input shadow" name="height" type="number" :value="formData.height" :placeholder="$t('device.PleaseEnterHeight')" maxlength="-1" @change="(e: UniInputChangeEvent)=> updateProperty('height', e.detail.value)"  />
				</view>
			</view>

			<view class="item">
				<view class="label"><text class="t">{{$t('device.DeviceValidityPeriod')}}</text></view>
				<view class="input-box input-box-row">
					<picker-date :value="formData.validStart" :placeholder="$t('device.PleaseSelectStartDate')" @refresh="(value: string)=> updateProperty('validStart', value)" ></picker-date>
					<view style="width: 24rpx;"></view>
					<picker-date :value="formData.validEnd" :placeholder="$t('device.PleaseSelectEndDate')" @refresh="(value: string)=> updateProperty('validEnd', value)"></picker-date>
				</view>
			</view>
			
			<view class="item">
				<view class="label"><text class="t">{{$t('device.ContactName')}}</text></view>
				<view class="input-box">
					<input class="uni-input shadow" name="contactName" :value="formData.contactName" :placeholder="$t('device.PleaseEnterContactName')" @change="(e: UniInputChangeEvent)=> updateProperty('contactName', e.detail.value)"  />
				</view>
			</view>
			<view class="item">
				<view class="label"><text class="t">{{$t('device.ContactPhone')}}</text></view>
				<view class="input-box">
					<input class="uni-input shadow" name="contactPhone" :value="formData.contactPhone" :placeholder="$t('device.PleaseEnterContactPhone')" maxlength="-1" @change="(e: UniInputChangeEvent)=> updateProperty('contactPhone', e.detail.value)"  />
				</view>
			</view>
			<view class="item">
				<button class="btn btn-submit" form-type="submit" type="primary">{{$t('index.Save')}}</button>
			</view>
		</form>
	</scroll-view>
</template>

<script lang="uts">
	import { APIS } from '@/api/config.uts'
	import { routeGoto } from '@/common/router.uts'
	import { request } from '@/utils/http/index'
	import { useState } from '@/store/index.uts'
	export default {
		data() {
			return {
				userInfo: {} as UTSJSONObject,
				formData: {} as UTSJSONObject,
				deviceId: '',
			}
		},
		onLoad(e: OnLoadOptions) {
			this.deviceId = e['device_id'] as string;
			const { state } = useState();
			this.userInfo = state.activeUser;
			if(this.deviceId != "-1") {
				this.getDeviceInfo();
				uni.setNavigationBarTitle({
					title: this.$t('pages.upgradeDevice')
				});
			}
			else {
				this.formData = {
					name: '',
					snCode: '',
					width: 0,
					height: 0,
					validStart: '',
					validEnd: '',
					contactName: '',
					contactPhone: '',
					userAccount: this.userInfo.account,
					status: 0
				}
				uni.setNavigationBarTitle({
					title: this.$t('pages.addDevice')
				});
			}
		},
		methods: {
			updateProperty(propertyName: string, proValue: string){
				if(this.formData.hasOwnProperty(propertyName)){					
					this.formData[propertyName] = proValue;
				}
				else {
					this.$data[propertyName] = proValue;
				}
			},
			async getDeviceInfo() {
				try {
					uni.showLoading({
						title: ''
					});
					
					const apiUrl = APIS.deviceInfo as string;
					const result = await request('GET', apiUrl + this.deviceId, {}) as UTSJSONObject;
					this.formData = result;
					uni.hideLoading();
				} catch (err){
					uni.hideLoading();
					const errObj = JSON.parse(JSON.stringify(err)) as UTSJSONObject;
					console.log(errObj);
					uni.showToast({
						icon: 'none',
						title: `${errObj.message}`,
						duration: 3000,
					})
				}
			},
			async onFormSubmit(){
				if(this.formData['name'] == null){
					uni.showToast({
						icon: 'none',
						title: '字段不能为空',
						duration: 3000,
						success: () => {
						}
					})
				}else{
					try {
						uni.showLoading({
							title: ''
						});
						
						const apiUrl = APIS.monitor.getString('save')!;
						await request("POST", apiUrl, this.formData);
						
						uni.showToast({
							icon: 'none',
							title: '保存成功',
							duration: 2000,
						})
						
						uni.hideLoading();
						if (this.formData.id != null) {							
							const { setActiveDevice } = useState();
							setActiveDevice(this.formData);
						}
						uni.navigateBack();
					} catch (err){
						uni.hideLoading();
						const errObj = JSON.parse(JSON.stringify(err)) as UTSJSONObject;
						console.log(errObj);
						uni.showToast({
							icon: 'none',
							title: `${errObj.message}`,
							duration: 3000,
						})
					}
				}
			},
		}
	}
</script>

<style lang="scss">
	.defalut-form{
		padding: 18rpx 36rpx;
		.item{
			padding: 18rpx 0;
			.label{
				.t{
					font-size: $uni-font-size-base;
				}
			}
			.input-box{
				padding-top: 18rpx;
				.uni-input{
					padding: 18rpx;
					border-radius: $uni-border-radius-lg;
					border: 1px solid;
					border-color: $uni-color-grey2;
				}
			}
			.input-box.input-box-row{
				flex-direction: row;
				align-items: center;
				justify-content: space-between;
			}
		}
		
	}
	.form{
		.selected-day{
			flex-direction: row;
			align-items: center;
			justify-content: center;
			.t{
				font-size: $uni-font-size-base;
			}
		}
		.picker-view {
		    width: 100%;
		    height: 220px;
			.item {
				height: 50px;
				.text {
					line-height: 50px;
					text-align: center;
				}
			}
		}
	}
	
	
</style>
