<template>
	<view class="app">
		<view class="canvas-component">
			<canvas 
				canvas-id="ucanvas" 
				id="ucanvas" 
				class="canvas"
				@touchstart="handleTouchStart"
			    @touchmove="handleTouchMove"
				@touchend="handleTouchEnd"
				:style="'width:'+canvasWidth+'px;height:'+canvasHeight+'px;'" />
		</view>
		<view class="top-button">
			<view class="item">
				<view class="icon-box icon-box-big no-margin">
					<image class="icon" src="/static/svg/save.png" mode="widthFix"></image>
				</view>
			</view>
			<view class="item">
				<view class="icon-box icon-box-big no-margin">
					<image class="icon" src="/static/svg/push.png" mode="widthFix"></image>
				</view>
			</view>
			<view class="item">
				<view class="icon-box icon-box-big no-margin">
					<image class="icon" src="/static/svg/reviewb.png" mode="widthFix"></image>
				</view>
			</view>
		</view>
		<view class="options">
			<view class="options-tab">
				<view class="item" :class="{active: activeTab == 0}" @click="handleActiveTab(0)"><text class="t">组件属性</text></view>
				<view class="item" :class="{active: activeTab == 1}" @click="handleActiveTab(1)"><text class="t">页面属性</text></view>
			</view>
			<scroll-view class="option-body" style="height: 360px;">
				<view class="option-a" :class="{active: activeTab == 0}">
					<VideoForm :item="activeComponent" :medias="mediaList" @refresh="updateComponent" />
					<ImageForm :item="activeComponent" :medias="mediaList" @refresh="updateComponent" />
					<WebForm :item="activeComponent" @refresh="updateComponent" />
					<WordForm :item="activeComponent" @refresh="updateComponent" />
					<TextForm :item="activeComponent" @refresh="updateComponent" />
				</view>
				<view class="option-b" :class="{active: activeTab == 1}">
					<view class="page-option-form">
						<view class="item">
							<view class="item-key">
								<text class="t">名称</text>
							</view>
							<view class="item-value">
								<input type="text" :value="activePage?.name" class="uni-input" />
							</view>
						</view>
						<view class="item">
							<view class="item-key">
								<text class="t">类型</text>
							</view>
							<view class="item-value">
								<radio-group name="type" @change="handleTypeChange">
									<view class="radio-group" >
										<radio class="radio" value="normal" :checked="activePage?.type == 'normal'" >常规</radio>
										<radio value="ad" :checked="activePage?.type == 'ad'">广告</radio>
									</view>
								</radio-group>
							</view>
						</view>
						<view class="item">
							<view class="item-key">
								<text class="t">有效期</text>
							</view>
							<view class="item-value">
								<checkbox :checked="activePage?.isHasValidity == true" @click="handleIsHasValidityChange"></checkbox>
							</view>
						</view>
						<view class="item" v-show="activePage?.isHasValidity == true">
							<view class="item-key">
								<text class="t">开始日期</text>
							</view>
							<view class="item-value">
								<input type="date" :value="activePage?.validStartDate" class="uni-input" />
							</view>
						</view>
						<view class="item" v-if="activePage?.isHasValidity == true">
							<view class="item-key">
								<text class="t">结束日期</text>
							</view>
							<view class="item-value">
								<input type="date" :value="activePage?.validEndDate" class="uni-input" />
							</view>
						</view>
						<view class="item">
							<view class="item-key">
								<text class="t">播放次数</text>
							</view>
							<view class="item-value">
								<input type="number" :value="activePage?.playCount" class="uni-input" />
							</view>
						</view>
						<view class="item">
							<view class="item-key">
								<text class="t">时间计划表</text>
							</view>
							<view class="item-value">
								<view class="sub-list" style="width: 100%;">
									<view class="sub-item" v-for="item in activePage?.schedulers" :key="item.id">
										<view class="sub-value">
											<checkbox-group class="radio-group" @change="handleScheduleDayChange">
												<checkbox v-for="scheduleDay in item.scheduleDays" :key="scheduleDay.day"
													:value="scheduleDay.day" :checked="scheduleDay.selected">
													{{ scheduleDay.label }}
												</checkbox>
											</checkbox-group>
										</view>
										<view class="sub-value">
											<input type="text" :value="item.startTime" class="uni-input" />
											<text>至</text>
											<input type="text" :value="item.endTime" class="uni-input" />
										</view>
									</view>
								</view>
							</view>
						</view>
					</view>
				</view>
			</scroll-view>
		</view>
		<view class="tools">
			<view class="pages">
				<swiper id="swiper-view" class="swiper">
					<swiper-item v-if="activeTab == 1" class="swiper-item" item-id="1">
						<view v-for="(item, index) in mediaConfig.pages" :key="index" class="item" :class="{active: activePage != null && activePage?.name == item.name}" @click="selectPage(item)">
							<text class="t">{{item.name}}</text>
						</view>
						<view class="item" style="background-color: #cccccc;" @click="addPage()">
							<text class="t">+</text>
						</view>
					</swiper-item>
					<swiper-item v-else class="swiper-item" item-id="2">
						<view v-for="(item, index) in  activePage?.components" :key="index" class="item" :class="{active: activeComponent != null && activeComponent?.name == item.name}" @click="selectComponent(item)">
							<text class="t">{{item.name}}</text>
						</view>
					</swiper-item>
				</swiper>
			</view>
			<view class="component">
				<view class="item" @click="createComponent(1)">
					<view class="icon-box no-margin">
						<image class="icon" src="/static/svg/component-6.png" mode="widthFix"></image>
					</view>
					<view class="text">
						<text class="t">视频</text>
					</view>
				</view>
				<view class="item" @click="createComponent(2)">
					<view class="icon-box no-margin">
						<image class="icon" src="/static/svg/component-0.png" mode="widthFix"></image>
					</view>
					<view class="text">
						<text class="t">图片</text>
					</view>
				</view>
				<view class="item" @click="createComponent(3)">
					<view class="icon-box no-margin">
						<image class="icon" src="/static/svg/component-1.png" mode="widthFix"></image>
					</view>
					<view class="text">
						<text class="t">文字</text>
					</view>
				</view>
				<view class="item" @click="createComponent(4)">
					<view class="icon-box no-margin">
						<image class="icon" src="/static/svg/component-7.png" mode="widthFix"></image>
					</view>
					<view class="text">
						<text class="t">网页</text>
					</view>
				</view>
				<view class="item" @click="createComponent(5)">
					<view class="icon-box no-margin">
						<image class="icon" src="/static/svg/component-8.png" mode="widthFix"></image>
					</view>
					<view class="text">
						<text class="t">文档</text>
					</view>
				</view>
			</view>
		</view>
	</view>
</template>
<script lang="uts" setup>
	// import { addZip,unZip,addZipAndSaveDisk } from "@/uni_modules/x-zip-s"
    import * as ucan from "@/uni_modules/u-canvas";
    import {
        UCanvas,
        Composition,
        Text,
        Rectangle,
        Polyline,
        Ring,
        Pie,
        Circle,
        Polygon,
        Picture,
        ImagePixel,
        Point,
    } from "@/uni_modules/u-canvas";
	
	import  { MediaConfig, MediaPage, BaseComponent, VideoComponent, ImageComponent, TextComponent, WebComponent, WordComponent, allDays, Scheduler } from './mediaConfig.uts'
	
	import { routeGoto } from '@/common/router.uts'
	import { FileManager} from './FileManager.uts'
	import { APIS } from '@/api/config.uts'
	import { request } from '@/utils/http/index'
	
	import VideoForm from './videoForm.uvue'
	import ImageForm from './imageForm.uvue'
	import WebForm from './webForm.uvue'
	import WordForm from './wordForm.uvue'
	import TextForm from './textForm.uvue'
	
	import i18n from '@/locale'
	
	// const tempDir = `${uni.env.USER_DATA_PATH}/temp/program`; //临时目录
	let programDir = '' //项目目录
	
	// const fileManager = new FileManager();
	
    const uCanvas = new UCanvas({ canvasId: "ucanvas" });
	
	const canvasWidth = ref('256');
	const canvasHeight = ref('192');
	const mediaList : Ref<UTSJSONObject[]> = ref([]);
	
	const canvasRect = ref({ left: 0, top: 0, width: 0, height: 0 });
	const programName = ref('');
	const mediaConfig = ref(new MediaConfig({
		"Left": 0.0,
		"Top": 0.0,
		"Ratio": 1.0,
		"Program": {
			"Name": "节目名称20250523021648",
			"MediaType": "PROGRAM",
			"Resolution": "256*192",
			"Size": 25929792.0,
			"MonitorCount": 1,
			"LastUpdatedTime": "2025-05-23 14:16:00",
			"CreatedSource": "admin",
			"Status": 0,
			"PlayCountPerHour": null,
			"IsHasValidity": false,
			"ValidStartDate": null,
			"ValidEndDate": null,
			"UserAccount": "user001",
			"Id": 9
		},
		"Pages": [{
			"Id": 1,
			"Name": "页面1",
			"Type": "normal",
			"Order": 1,
			"ThumbnailFilePath": "节目名称20250523021648\\页面1\\thumbnail.png",
			"IsHasValidity": false,
			"ValidStartDate": null,
			"ValidEndDate": null,
			"PlayCount": 1,
			"PlayGap": 0,
			"AdPlayMode": null,
			"Schedulers": [{
				"Id": 1,
				"StartTime": "00:00:00",
				"EndTime": "23:59:59",
				"ScheduleDays": [1, 2, 3, 4, 5, 6, 7]
			}],
			"Components": [{
				"Type": "Video",
				"PlayMode": "fullscreen",
				"IsClip": false,
				"Id": 1,
				"Name": "视频1",
				"ZIndex": 1,
				"Left": 0.0,
				"Top": 0.0,
				"Width": 256.0,
				"Height": 192.0,
				"Source": "节目名称20250523021648\\页面1\\视频1\\test2.mp4",
				"Timeline": 20.0,
				"PlayCount": 1,
				"PlayDuration": "00:00:20"
			}]
		}, {
			"Id": 2,
			"Name": "页面2",
			"Type": "normal",
			"Order": 2,
			"ThumbnailFilePath": "节目名称20250523021648\\页面2\\thumbnail.png",
			"IsHasValidity": false,
			"ValidStartDate": null,
			"ValidEndDate": null,
			"PlayCount": 1,
			"PlayGap": 10,
			"AdPlayMode": "perday",
			"Schedulers": [{
				"Id": 1,
				"StartTime": "00:00:00",
				"EndTime": "23:59:59",
				"ScheduleDays": [1, 2, 3, 4, 5, 6, 7]
			}],
			"Components": [{
				"Type": "Image",
				"EffectDuration": 1000,
				"ComponentEffect": "Empty",
				"Id": 1,
				"Name": "图片1",
				"ZIndex": 1,
				"Left": 0.0,
				"Top": 0.0,
				"Width": 256.0,
				"Height": 192.0,
				"Source": "节目名称20250523021648\\页面2\\图片1\\图片1.jpg",
				"Timeline": 5.0,
				"PlayCount": 1,
				"PlayDuration": "00:00:05"
			}]
		}, {
			"Id": 3,
			"Name": "页面3",
			"Type": "normal",
			"Order": 3,
			"ThumbnailFilePath": "节目名称20250523021648\\页面3\\thumbnail.png",
			"IsHasValidity": false,
			"ValidStartDate": null,
			"ValidEndDate": null,
			"PlayCount": 1,
			"PlayGap": 10,
			"AdPlayMode": "perday",
			"Schedulers": [{
				"Id": 1,
				"StartTime": "00:00:00",
				"EndTime": "23:59:59",
				"ScheduleDays": [1, 2, 3, 4, 5, 6, 7]
			}],
			"Components": [{
				"Type": "Text",
				"Background": "#FF000000",
				"TextColor": "#FFFFFFFF",
				"PlayMode": "pageTurning",
				"Direction": "rollingLeft",
				"EffectDuration": 1000,
				"ComponentEffect": "Empty",
				"RollingSpeed": 2,
				"TextSize": 16.0,
				"IsLoopEnabled": true,
				"LetterSpacing": 2.0,
				"LineSpacing": 2.0,
				"RtfFilePath": "节目名称20250523021648\\页面3\\文本1\\文本1.xaml",
				"VerticalContentAlignment": "Center",
				"Id": 1,
				"Name": "文本1",
				"ZIndex": 1,
				"Left": 0.0,
				"Top": 0.0,
				"Width": 256.0,
				"Height": 192.0,
				"Source": "你好，世界sfsf\r\n",
				"Timeline": 5.0,
				"PlayCount": 1,
				"PlayDuration": "00:00:05"
			}]
		}, {
			"Id": 4,
			"Name": "页面4",
			"Type": "normal",
			"Order": 4,
			"ThumbnailFilePath": "节目名称20250523021648\\页面4\\thumbnail.png",
			"IsHasValidity": false,
			"ValidStartDate": null,
			"ValidEndDate": null,
			"PlayCount": 1,
			"PlayGap": 10,
			"AdPlayMode": "perday",
			"Schedulers": [{
				"Id": 1,
				"StartTime": "00:00:00",
				"EndTime": "23:59:59",
				"ScheduleDays": [1, 2, 3, 4, 5, 6, 7]
			}],
			"Components": [{
				"Type": "Video",
				"PlayMode": "fullscreen",
				"IsClip": false,
				"Id": 1,
				"Name": "视频1",
				"ZIndex": 1,
				"Left": 0.0,
				"Top": 0.0,
				"Width": 256.0,
				"Height": 192.0,
				"Source": "节目名称20250523021648/页面4/视频1/视频3.mp4",
				"Timeline": 4.0,
				"PlayCount": 1,
				"PlayDuration": "00:00:04"
			}]
		}]
	}));
	
	const activePage : Ref<MediaPage | null> = ref(null);
	
	const activeComponent : Ref<BaseComponent | null> = ref(null);
	
	const activeTab = ref(1);
	
	const handleActiveTab = (val: number)=>{
		activeTab.value = val
	}
	
	const getCanvasRect = () => {
		uni.createSelectorQuery()
			.in(this)
			.select('.canvas')
			.boundingClientRect(rect => {
				if (rect instanceof NodeInfo) {
					const node = rect as NodeInfo;
					const data = {
						left: node.left,
						top: node.top,
						width: node.width,
						height: node.height
					}
					
					canvasRect.value = data;
				}
			})
			.exec();
	}
	
	const handleIsHasValidityChange = () => {
		if (activePage.value != null) {
			activePage.value!.isHasValidity = !activePage.value!.isHasValidity;
		}
	}
	
	const handleTypeChange = (event: UniRadioGroupChangeEvent) => {
		if (activePage.value != null) {
			activePage.value.type = event.detail.value;
		}
	};
	
	const handleScheduleDayChange = (event: UniCheckboxGroupChangeEvent) => {
		if (activePage.value != null) {
			console.log(event);
			const selectedValues = event.detail.value as string [];
			const scheduler = activePage.value.schedulers[0].toModel();
			const newScheduler = new Scheduler({
				...scheduler,
				ScheduleDays: selectedValues.map(c=> parseInt(c))
			});
			
			activePage.value.schedulers.splice(0, 1, newScheduler);
		}
	}
	
	const addPage = () => {
		const pagesCount = mediaConfig.value.pages.length + 1;	
		
		const newPage = {
			"Id": pagesCount ,
			"Name": "页面" + pagesCount,
			"Type": "normal",
			"Order": pagesCount,
			"ThumbnailFilePath": "",
			"IsHasValidity": false,
			"ValidStartDate": null,
			"ValidEndDate": null,
			"PlayCount": 1,
			"PlayGap": null,
			"AdPlayMode": null,
			"Schedulers": [{
				"Id": 1,
				"StartTime": "00:00:00",
				"EndTime": "23:59:59",
				"ScheduleDays": [1, 2, 3, 4, 5, 6, 7]
			}],
		}
		
		const page = new MediaPage(newPage);
		mediaConfig.value.pages.push(page)
		activePage.value = page;
		activeComponent.value = null;
	}
	
	const selectPage = (item: MediaPage) =>{
		activePage.value = item;
		activeComponent.value = null;
	}	
	
	async function drawPage() :Promise<void> {
		await activePage.value?.draw(uCanvas);
	    uCanvas.render();
	}
	
	const handleTouchStart = async (e: TouchEvent) =>{
		if(activePage.value == null) return;
		const touch = e.touches[0];
		const touchX = Math.round(touch.clientX - canvasRect.value["left"] as number);
		const touchY = Math.round(touch.clientY - canvasRect.value["top"] as number);
		// 取消所有选中状态
		for (const component of activePage.value.components.filter(c => c.element != null)) 
		{
			component.element!.isSelected = false;
		}

		// 检测点击的图形
		for (const component of activePage.value.components.filter(c => c.element != null).sort((a,b)=>b.zIndex - a.zIndex)) {
			console.log(component);
			const image = component.element!;
			if (image.isHitResizeHandle(touchX, touchY)) {
				image.isResizing = true;
				image.isSelected = true;
				activeComponent.value = component;
				break;
			} else if (image.isHit(touchX, touchY)) {
				image.isDragging = true;
				image.isSelected = true;
				activeComponent.value = component;
				break;
			}
		}

		if (activeComponent.value != null) {
			activeComponent.value!.element!.lastTouchX = touchX;
			activeComponent.value!.element!.lastTouchY = touchY;
			await drawPage(); // 立即显示边框
		}
	}
	
	const handleTouchMove = async (e: TouchEvent) => {
		if (activeComponent.value == null || activeComponent.value!.element == null) return;
		
		let component = activeComponent.value;

		const touch = e.touches[0];
		const touchX = Math.round(touch.clientX - canvasRect.value["left"] as number);
		const touchY = Math.round(touch.clientY - canvasRect.value["top"] as number);
		const deltaX = touchX - component.element!.lastTouchX;
		const deltaY = touchY - component.element!.lastTouchY;

		if (component.element!.isDragging) {
			// 拖拽移动
			component.element!.x = Math.max(0, Math.min(
				canvasRect.value["width"] as number - component.element!.width, 
				component.element!.x + deltaX
			));
		    component.element!.y = Math.max(0, Math.min(
				canvasRect.value["height"] as number - component.element!.height, 
				component.element!.y + deltaY
			));
			component.left = component.element!.x;
			component.top = component.element!.y;
		} else if (component.element!.isResizing) {
			// 改变大小
			component.element!.width = Math.min(
				Math.max(10, component.element!.width + deltaX),
				canvasRect.value["width"] as number - component.element!.x
			);
			
			component.element!.height = Math.min(
				Math.max(10, component.element!.height + deltaY),
				canvasRect.value["height"] as number - component.element!.y
			);
			
			component.width = component.element!.width;
			component.height = component.element!.height;
		}

		component.element!.lastTouchX = touchX;
		component.element!.lastTouchY = touchY;
		await drawPage();
	}
	
	    // 触摸结束
	const handleTouchEnd = () => {
		if (activeComponent.value != null && activeComponent.value!.element != null){
			activeComponent.value!.element!.isDragging = false;
			activeComponent.value!.element!.isResizing = false;
			const data = activeComponent.value!.toModel() as UTSJSONObject;
			const type = data['Type'] as string;
			let newComponent : BaseComponent | null = null;
			switch (type) {
				case "Video":
					newComponent = new VideoComponent(data);
					break;
				case "Text":
					newComponent = new TextComponent(data);
					break;
				case "Image":
					newComponent = new ImageComponent(data);
					break;
				case "Web":
					newComponent = new WebComponent(data);
					break;
				case "Word":
					newComponent = new WordComponent(data);
					break;
			}		
			
			activeComponent.value = newComponent;
		}
	}
	
	async function selectComponent(item: BaseComponent){
		activeComponent.value = item;
		if (activeComponent.value!= null && activeComponent.value!.element != null) {
			for (const component of activePage.value!.components.filter(c => c.element != null))
			{
				component.element!.isSelected = false;
			}
			activeComponent.value!.element.isSelected = true;
			await drawPage();
		}
	}
	
	async function createComponent(index: number) {
		if (activePage.value == null) return;
		const maxId = activePage.value!.components.length == 0 ? 0 : Math.max(...activePage.value!.components.map(c => c.id)) + 0;
		let component : BaseComponent | null = null;
		switch(index) {
			case 1:
				component = VideoComponent.createInstance(maxId + 1);
				break;
			case 2:
				component = ImageComponent.createInstance(maxId + 1);
				break;
			case 3:
				component = TextComponent.createInstance(maxId + 1);
				break;
			case 4:
				component = WebComponent.createInstance(maxId + 1);
				break;
			case 5:
				component = WordComponent.createInstance(maxId + 1);
				break;
		}
		if(component !=  null) {
			activePage.value?.components.push(component);
			if (!component.hasFile) {
				selectComponent(component);
			} else {				
				activeComponent.value = component;
			}
		}
	}
	
	async function updateComponent(data: UTSJSONObject) : Promise<void> {
		if (activePage.value == null) return;
		let component : BaseComponent | null = null;
		const type = data['Type'] as string;
		switch (type) {
			case "Video":
				component = new VideoComponent(data);
				break;
			case "Text":
				component = new TextComponent(data);
				break;
			case "Image":
				component = new ImageComponent(data);
				break;
			case "Web":
				component = new WebComponent(data);
				break;
			case "Word":
				component = new WordComponent(data);
				break;
		}
		
		if (component != null) {
			let index = activePage.value!.components.findIndex(c => c.name == data["Name"]);
			activePage.value!.components.splice(index, 1, component!);
			selectComponent(component!);
		}
	}
	
    async function init() : Promise<void> {
		const currentConfig = mediaConfig.value; //await fileManager.getProgramConfig(programName.value, canvasWidth.value, canvasHeight.value);
		canvasWidth.value = currentConfig.program.resolution.split("*")[0];
		canvasHeight.value = currentConfig.program.resolution.split("*")[1];
		mediaConfig.value = currentConfig;
		activePage.value = currentConfig.pages.length > 0 ? currentConfig.pages[0] : null;
		activeComponent.value = activePage.value == null || activePage.value!.components.length == 0 ? null : activePage.value?.components[0];
        console.log(activeComponent.value);
		await uCanvas.ensureInitialize();
		await drawPage();
    }
	
	async function handlePush() :Promise<void> {
		uni.showToast({
			icon: 'none',
			title: '请稍候，功能未开放',
			duration: 3000,
			success: () => { 
			}
		})
	}
	
	async function handleReview() :Promise<void> {		
		routeGoto('/pages/programs/review')
	}
	
	async function getMedias(){
		try {
			uni.showLoading({
				title: ''
			});
			const person: UTSJSONObject = {}
			const result = await request('GET', APIS.mediaAll as string, person);
			const d = result as Array<UTSJSONObject>;
			for (let media of d) {
				const param = '?fileName=' + media.src;
				const downloadResult = await new Promise<DownloadFileSuccess>((resolve: (value: DownloadFileSuccess) => void, reject: (reason?: any) => void) => {
					uni.downloadFile({
						url: APIS.mediaDownload as string + param,
						success: (res) => {
							resolve(res);
						},
						fail: (err) => {
							reject(err);
						}
					});
				});
				
				media.src = downloadResult.tempFilePath;
				
				// const saveResult = await new Promise<UTSJSONObject>((resolve: (value: UTSJSONObject) => void, reject: (reason?: any) => void) => {
				// 	uni.saveFile({
				// 		tempFilePath: downloadResult['tempFilePath'] as string,
				// 		success: (res : any) => {
				// 			resolve(res as UTSJSONObject);
				// 		},
				// 		fail: (err : any) => {
				// 			reject(err);
				// 		}
				// 	});
				// });
			}
			mediaList.value = d
			uni.hideLoading();
		} catch (error) {
		  console.error('获取媒体库失败', error)
		  uni.hideLoading();
		}
	}
	
	onLoad((e: OnLoadOptions): void => {		
		programName.value = e['name'] as string;
		if (e['width'] != null){
			canvasWidth.value = e['width'] as string;
		}
		
		if (e['height'] != null){
			canvasHeight.value = e['height'] as string;
		}
		
		const defl = uni.getStorageSync('language') as string
		
		let defaultLang =  'kr'
		if(defl != ''){
			defaultLang = defl
		}
		
		uni.setNavigationBarTitle({
			title: i18n.global.t('pages.programEditor', null, defaultLang)
		})
	});
    onReady(() => {
        init();
		getCanvasRect();
		getMedias();
    });
</script>

<style lang="scss">
    .canvas-component {
        width: 100%;
		display: flex;
		align-items: center;
		justify-content: center;
		padding: 60px 20px 20px 20px;
		
		.canvas {
		    width: 100%;
		    height: 100%;
			background: #f0f0f0;
		}
    }
	
	.radio-group {
		display: flex; /* 横向排列 */
		flex-direction: row; /* 行排列 */
		align-items: center; /* 垂直居中 */
		flex-wrap: wrap;
		
		.radio {
			margin-right: 20rpx;
		}
	}
	.tools{
		position: fixed;
		width: 100%;
		left: 0;
		bottom: 0;
		z-index: 999;
		background-color: $uni-bg-color;
		padding: 24rpx;
		.pages{
			padding: 24rpx  0;
			.swiper-item{
				flex-direction: row;
				align-items: center;
				justify-content: space-between;
				width: 100%;
				.item{
					// width: 21%;
					height: 96rpx;
					flex: 1;
					background-color: #000000;
					flex-direction: row;
					align-items: center;
					justify-content: center;
					border-radius: $uni-border-radius-lg;
					margin: 0 2%;
					.t{
						color: $uni-text-color-inverse;
						font-size: $uni-font-size-sm;
					}
				}
				.item.active{
					background-color: $uni-bg-color-blue;
				}
			}
		}
		.component{
			padding: 24rpx 0;
			flex-direction: row;
			align-items: center;
			justify-content: space-between;
			.item{
				.icon-box{
					margin: 0 auto;
				}
				.t{
					font-size: $uni-font-size-sm;
				}
			}
		}
	}
    .top-button{
		padding: 24rpx 0;
		flex-direction: row;
		align-items: center;
		justify-content: space-between;
		position: fixed;
		right: 0;
		top: 0;
		.item{
			.icon-box{
				margin: 0 12rpx;
				.icon{
					background: #ffffff;
					border-radius: 128rpx;
					padding: 8rpx;
					border: 1px solid #eeeeee;
				}
			}
			.t{
				font-size: $uni-font-size-sm;
			}
		}
	}
	.options{
		padding: 24rpx;
		
		.options-tab{
			width: 100%;
			display: flex;
			flex-direction: row;
			align-items: center;
			justify-content: center;
			padding-bottom: 24rpx;
			
			.item{
				padding: 0 24rpx;
				.t{
					font-size: 14px;
				}
			}
			.item.active{
				.t{
					color: $uni-color-primary
				}
			}
		}
		.option-body {
			.option-a,
			.option-b {
				display: none;
			}
			.option-a.active,
			.option-b.active {
				display: flex;
			}
			
			.page-option-form{
				background: #ffffff;
				border-radius: 24rpx;
				box-shadow: 0 0 12rpx rgba(0,0,0,0.05);
				padding: 12rpx 0;
				.item{
					padding: 18rpx 24rpx;
					display: flex;
					flex-direction: row;
					align-items: center;
					justify-content: space-between;
					
					.item-key{
						width: 20%;
						.t{
							font-size: 14px;
							color: #999999;
						}
					}
					.item-value{
						width: 80%;
						display: flex;
						flex-direction: row;
						.sub-list{
							width: 100%;
							
							.sub-item{
								width: 100%;
								
								.sub-value{
									flex-direction: row;
									align-items: center;
									justify-content: space-between;
									margin-bottom: 10rpx;
								}
							}
						}
						.uni-input{
							border: 1px solid #ccc;
							border-radius: 12rpx;
						}
					}
				}
			}
		}
	}
</style>