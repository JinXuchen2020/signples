<template>
	<view class="component-form" v-if="formData != null">
		<view class="item">
			<view class="item-key">
				<text class="t">区域(px)</text>
			</view>
			<view class="position">
				<view class="location">
					X<input type="number" :value="formData?.left" class="uni-input" @change="onLeftChange" />						
					Y<input type="number" :value="formData?.top" class="uni-input" @change="onTopChange" />						
				</view>						
				<view class="location">
					W<input type="number" :value="formData?.width" class="uni-input" @change="onWidthChange" />
					H<input type="number" :value="formData?.height" class="uni-input" @change="onHeightChange" />
				</view>
			</view>
		</view>
		<view v-if="formData?.isShowInfo == true">
			<view class="item">
				<view class="item-key">
					<text class="t">名称</text>
				</view>
				<view class="item-value">
					<input type="text" :value="formData?.name" class="uni-input" />
				</view>
			</view>
			<view class="item">
				<view class="item-key">
					<text class="t">层级</text>
				</view>
				<view class="item-value">
					<input type="number" :value="formData?.zIndex" class="uni-input" />
				</view>
			</view>
			<view class="item">
				<view class="item-key">
					<text class="t">播放次数</text>
				</view>
				<view class="item-value">
					<input type="number" :value="formData?.playCount" class="uni-input" />
				</view>
			</view>
			<view class="item">
				<view class="item-key">
					<text class="t">播放时长(s)</text>
				</view>
				<view class="item-value">
					<input type="text" :value="formData?.playDuration" class="uni-input" />
				</view>
			</view>
		</view>
		<view class="item" v-else>
			<view class="item-key">
				<text class="t">选择文件</text>
			</view>
			<view class="options">
				<view class="options-tab">
					<view class="item" :class="{active: activeTab == 0}" @click="handleActiveTab(0)"><text class="t">本地文件</text></view>
					<view class="item" :class="{active: activeTab == 1}" @click="handleActiveTab(1)"><text class="t">媒体库</text></view>
				</view>
				<view class="option-body">
					<view class="option-a" :class="{active: activeTab == 0}">
						<view class="local" @click="handleUpload()">
							<text class="t">+</text>
						</view>
					</view>
					<view class="option-b" :class="{active: activeTab == 1}">
						<!-- <scroll-view> -->
							<view v-for="(item, index) in (medias as UTSJSONObject[])" :key="index" class="item" @click="selectMedia(item)">
								<image class="image" :src="item['src']"></image>
							</view>					
						<!-- </scroll-view> -->
					</view>
				</view>
			</view>
		</view>			
	</view>	
</template>

<script lang="uts" >
	import { FileManager } from './fileManager.uts';
	import { BaseComponent,VideoComponent } from './mediaConfig.uts'
	export default {
		props: {
			item: {
				type: BaseComponent,
				default: null
			},
			programName: {
				type: String,
				default: ''
			},
			pageName: {
				type: String,
				default: ''
			},
			fileManager: {
				type: FileManager,
				default: null
			},
			medias: {
				default: () => []
			}
		},
		emits: ['refresh', 'copyFile'],
		data() {
			return {
				formData: null as VideoComponent | null,
				activeTab: 0,
			}
		},
		watch: {
			item(newValue?: BaseComponent) {
				if (newValue instanceof VideoComponent) {	
					this.formData = newValue as VideoComponent;
					this.activeTab = 0;
				}
				else {
					this.formData = null;
				}
			}
		},
		onReady() {
			if (this.item instanceof VideoComponent) {
				this.formData = this.item as VideoComponent;
				this.activeTab = 0;
			}
			else {
				this.formData = null;
			}
		},
		methods: {			
			handleActiveTab(val: number) {
				this.activeTab = val
			},
			onLeftChange(e: UniInputChangeEvent) {
				this.handleUpdate(parseInt(e.detail.value), "left")
			},
			onTopChange(e: UniInputChangeEvent) {
				this.handleUpdate(parseInt(e.detail.value), "top")
			},
			onWidthChange(e: UniInputChangeEvent) {
				this.handleUpdate(parseInt(e.detail.value), "width")
			},
			onHeightChange(e: UniInputChangeEvent) {
				this.handleUpdate(parseInt(e.detail.value), "height")
			},
			handleUpdate(val: number, type: string) {
				if(this.formData == null) return;
				
				switch(type) {
					case 'left':
						this.formData!.left = val;
						if (this.formData!.width + val > 256) {
							this.formData!.width = 256 - val;
						}
						break;
					case 'top':
						this.formData!.top = val;
						if (this.formData!.height + val > 192) {
							this.formData!.height = 192 - val;
						}
						break;
					case 'width':
						let widthVal = val;
						if (this.formData!.left + val > 256) {
							widthVal = 256 - this.formData!.left;
						}
						this.formData!.width = widthVal;
						break;
					case 'height':
						let heightVal = val;
						if (this.formData!.top + val > 256) {
							heightVal = 192 - this.formData!.top;
						}
						this.formData!.height = heightVal;
						break;					
				}
				
				const data = this.formData!.toModel();
				this.$emit("refresh", data);
				
			},
			handleUpload() {
				if(this.formData == null) return;
				uni.chooseMedia({
					count: 1,
					sourceType: ['album'],
					mediaType: ['video'],
					success: (res) => {
						const tempFiles: ChooseMediaTempFile[] = res.tempFiles as ChooseMediaTempFile[];

						for (let i = 0; i < tempFiles.length; i++) {
							const tempFile : ChooseMediaTempFile = tempFiles[i];
							const fileName = tempFile.tempFilePath.split("/")[tempFile.tempFilePath.split("/").length - 1];
							const destPath =  `${uni.getStorageSync("program-folder") as string}/${this.programName}/${this.pageName}/${this.formData!.name}/${fileName}`;
							this.fileManager!.copyFile(tempFile.tempFilePath, destPath).then(res => {
								this.formData!.source = res;
								this.formData!.thumbFilePath = tempFile.thumbTempFilePath as string
								this.formData!.timeLine = tempFile.duration as number;
								this.formData!.playDuration = this.getPlayDuration(this.formData!.timeLine);
								this.formData!.isShowInfo = true;
								this.formData!.width = 256;
								this.formData!.height = 192;
								const data = this.formData!.toModel();
								this.$emit("refresh", data);
							});
						}
					},
					fail: (err) => {
						console.log("err: ", JSON.stringify(err));
						uni.showToast({
						  title:"choose media error.code:" + err.errCode+";message:"+err.errMsg,
						  position:"bottom"
						})
					}
				})
			},
			selectMedia(item: UTSJSONObject) {
				if(this.formData == null) return;
				if (item['type'] != 'Video') {
					uni.showToast({
						title: "视频组件只能选择视频媒体",
						icon: 'none'
					})
					return;
				}
				const fileName = item.getString('src')!.split("/")[item.getString('src')!.split("/").length - 1];
				const destPath =  `${uni.getStorageSync("program-folder") as string}/${this.programName}/${this.pageName}/${this.formData!.name}/${fileName}`;
				this.fileManager!.copyFile(item.getString('src')!, destPath).then((res: string) => {
					this.formData!.source = res;
					this.formData!.thumbFilePath = item.src as string;
					this.formData!.timeLine = 10;
					this.formData!.playDuration = this.getPlayDuration(this.formData!.timeLine);
					this.formData!.isShowInfo = true;						  
					this.formData!.width = 256;
					this.formData!.height = 192;
					const data = this.formData!.toModel();
					this.$emit("refresh", data);
				});
			},
			getPlayDuration: (timeLine: number)=> {
				const seconds = Math.round(timeLine % 60);
				const minutes = Math.round((timeLine / 60) % 60);
				let hours = Math.round(timeLine / 60 / 60);
				if (hours > 23){
				    hours = 23;
				}
				
				const result = `${hours < 10 ? '0'+ hours : hours}:${minutes < 10 ? '0'+ minutes : minutes}:${seconds < 10 ? '0'+ seconds : seconds}`;
				return result;
			}
		}
	}
</script>

<style lang="scss">
	.component-form{
		background: #ffffff;
		border-radius: 24rpx;
		box-shadow: 0 0 12rpx rgba(0,0,0,0.05);
		padding: 12rpx 0;
		.item{
			padding: 18rpx 24rpx;
			display: flex;
			flex-direction: row;
			align-items: center;
			justify-content: space-between;
			
			.item-key{
				width: 20%;
				.t{
					font-size: 14px;
					color: #999999;
				}
			}
			
			.options {
				width: 80%;
				display: flex;
				flex-direction: column;
				.options-tab{
					width: 100%;
					display: flex;
					flex-direction: row;
					align-items: center;
					justify-content: center;
					padding-bottom: 24rpx;
					
					.item{
						padding: 0 24rpx;
						.t{
							font-size: 14px;
							color: $uni-color-grey
						}
					}
					.item.active{
						.t {
							color: $uni-color-primary
						}
					}
				}
				.option-body {
					.option-a,
					.option-b {
						display: none;
					}
					.option-a.active,
					.option-b.active {
						display: flex;
					}
					
					.local {
						// width: 21%;
						height: 220rpx;
						// flex: 1;
						background-color: $uni-color-primary;
						flex-direction: row;
						align-items: center;
						justify-content: center;
						border-radius: $uni-border-radius-lg;
						margin: 0 2%;
						.t{
							color: $uni-text-color-inverse;
							font-size: $uni-font-size-sm;
						}
					}
					.option-b {
						.item {
							display: flex;
							flex-direction: row;
							flex-wrap: wrap;
							.image {
								width: 220rpx;
								height: 200rpx;
								padding: 10rpx;
							}
						}
					}
				}
			}
			.item-value{
				width: 80%;
				display: flex;
				flex-direction: row;
				.sub-list{
					width: 100%;
					
					.sub-item{
						width: 100%;
						
						.sub-value{
							flex-direction: row;
							align-items: center;
							justify-content: space-between;
						}
					}
				}
				.uni-input{
					border: 1px solid #ccc;
					border-radius: 12rpx;
					height:30rpx
				}
			}
			.position {
				width: 80%;
				display: flex;
				flex-direction: column;
				.location {
					display: flex;
					flex-direction: row;
					align-items: center;
					margin-bottom: 10rpx;
				
					.uni-input{
						flex: 1;
						margin-left: 10rpx;
						border: 1px solid #ccc;
						border-radius: 12rpx;
						height:30rpx
					}
				}
			}
		}
	}

</style>