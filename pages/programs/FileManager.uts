import { MediaConfig } from './mediaConfig.uts'
import { APIS } from '@/api/config.uts'
export class FileManager {
	fs: FileSystemManager;
	userInfo: UTSJSONObject;
	tempDir: string;
	token: string;
	
	constructor(){
		this.fs = uni.getFileSystemManager();
		this.userInfo = uni.getStorageSync("userInfo") as UTSJSONObject;
		this.token = uni.getStorageSync("token") as string;
		this.tempDir = `${uni.env.USER_DATA_PATH}/temp/program`;
	}
	
	async getProgramList() {
		let results: UTSJSONObject[] = [];
		const userAccount = this.userInfo['account'] as string;
		const userProgramFolder = `${this.tempDir}/${userAccount}`
		try {
			const items = this.fs.readdirSync(userProgramFolder);
			
			items?.forEach(item => {
				const itemPath = `${userProgramFolder}/${item}`;
				this.fs.stat({
					path: itemPath,
					recursive: false,
					success: res => {
						if(!res.stats[0].stats.mIsFile) {
							const data = {
								name: item,
								path: itemPath
							}
							
							results.push(data)
						}
					}
				});
			});
			console.log('文件夹列表:', items);
		} catch (err) {
			console.error('读取目录失败:', err);
		}
		
		return results;
	}
	
	async IsExist(filePath: string) {
		try {
			this.fs.accessSync(filePath);
			return true;
		} catch (err) {
			return false;
		}
	}
	
	async createFolder(folderPath: string) {
		if(!await this.IsExist(folderPath)){
			this.fs.mkdirSync(folderPath, true);
		}	
	}
	
	async copyFile(srcPath: string, destFilePath: string) {
		const userAccount = this.userInfo['account'] as string;
		let destPath = `${this.tempDir}/${userAccount}/${destFilePath}`;
		this.fs.copyFileSync(srcPath, destPath);
		return destPath;
	}
	
	async readZipFile(programName: string) {
		const userAccount = this.userInfo['account'] as string;
		const destPath = `${this.tempDir}/${userAccount}/${programName}.zip`;
		const fd = this.fs.openSync({
			filePath: destPath,
			flag: 'r'
		});
		return this.fs.fstatSync({
			fd: fd
		}).size;
	}
	
	async getProgramConfig(programName: string, width: string, height: string) {
		const userAccount = this.userInfo['account'] as string;
		const programFolder = `${this.tempDir}/${userAccount}/${programName}`;
		const configFilePath = `${programFolder}/MediaConfig.json`;
		let configFileContent : UTSJSONObject = {}; 
		if (await this.IsExist(configFilePath)) {
			const content = this.fs.readFileSync(configFilePath, 'utf-8') as string;
			configFileContent = JSON.parse(content) as UTSJSONObject;
		} else {
			await this.createFolder(programFolder);
			configFileContent = {
				"Left": 0.0,
				"Top": 0.0,
				"Ratio": 1.0,
				"Program": {
					"Name": programName,
					"MediaType": "PROGRAM",
					"Resolution": `${width}*${height}`,
					"Size": 0,
					"MonitorCount": 0,
					"LastUpdatedTime": new Date().toISOString(),
					"CreatedSource": "admin",
					"Status": 0,
					"PlayCountPerHour": null,
					"IsHasValidity": false,
					"ValidStartDate": null,
					"ValidEndDate": null,
					"UserAccount": userAccount,
					"Id": 1
				}
			}
			this.fs.writeFileSync(configFilePath, JSON.stringify(configFileContent),"utf-8");
		}		
		
		return new MediaConfig(configFileContent);
	}
	
	async saveProgram(programName: string, data: UTSJSONObject) {
		const userAccount = this.userInfo['account'] as string;
		const programFolder = `${this.tempDir}/${userAccount}/${programName}`;
		const configFilePath = `${programFolder}/MediaConfig.json`;
		
		this.fs.writeFileSync(configFilePath, JSON.stringify(data),"utf-8");
	}
	
	async zipProgram(programName: string) {
		const userAccount = this.userInfo['account'] as string;
		const sourcePath = `${this.tempDir}/${userAccount}/${programName}`;
		const zipFile = `${this.tempDir}/${userAccount}/${programName}.zip`;
	}
	
	async uploadProgram(program: UTSJSONObject) {
		const userAccount = this.userInfo['account'] as string;
		const zipFile = `${this.tempDir}/${userAccount}/${program.getString('name')}.zip`;
		
		const res = await uni.uploadFile({
			url: APIS.uploadZip,
			filePath: zipFile,
			name: 'file',
			header: {
				'Authorization': "Bearer " + this.token
			},
		})
		
		return res;
	}
	
	async function sendCMD(program: UTSJSONObject, preDevice: UTSJSONObject[]){
		preDevice.forEach((item, index) => {
			try {
				uni.showLoading({
					title: ''
				});
				const cmd = JSON.stringify(program);
				uni.request({
					url: APIS.sendCMD as string,
					method: "POST",
					header: {
						'Authorization': "Bearer " + this.token
					},
					data:{
						cmd: "CMD|SendProgram|" + cmd,
						deviceSnCode: item.getString('snCode')
					},
					success: (ress) => {
						console.log('sendCMD program res', ress)
						uni.showToast({
						  title: '发布成功',
						  icon: 'success',
						  duration: 1000
						})
					},
					fail: (err) => {
						console.log('sendCMD program err', err)
						uni.showToast({
						  title: '发布失败',
						  icon: 'success',
						  duration: 2000
						})
					}
				});
			} catch (err){
				console.log(err)
			}
		})
	}
}