<template>
	<view class="component-form" v-if="formData != null">
		<view class="item">
			<view class="item-key">
				<text class="t">区域(px)</text>
			</view>
			<view class="position">
				<view class="location">
					X<input type="number" :value="formData?.left" class="uni-input" @change="onLeftChange" />						
					Y<input type="number" :value="formData?.top" class="uni-input" @change="onTopChange" />						
				</view>						
				<view class="location">
					W<input type="number" :value="formData?.width" class="uni-input" @change="onWidthChange" />
					H<input type="number" :value="formData?.height" class="uni-input" @change="onHeightChange" />
				</view>
			</view>
		</view>
		<view>
			<view class="item">
				<view class="item-key">
					<text class="t">名称</text>
				</view>
				<view class="item-value">
					<input type="text" :value="formData?.name" class="uni-input" />
				</view>
			</view>
			<view class="item">
				<view class="item-key">
					<text class="t">层级</text>
				</view>
				<view class="item-value">
					<input type="number" :value="formData?.zIndex" class="uni-input" />
				</view>
			</view>
			<view class="item">
				<view class="item-key">
					<text class="t">内容</text>
				</view>
				<view class="item-value">
					<input type="textarea" :value="formData?.source" class="uni-input" />
				</view>
			</view>
			<view class="item">
				<view class="item-key">
					<text class="t">背景色</text>
				</view>
				<view class="item-value">
					<input type="color" :value="formData?.background" class="uni-input" />
				</view>
			</view>
			<view class="item">
				<view class="item-key">
					<text class="t">垂直对齐</text>
				</view>
				<view class="item-value">
					<radio-group name="verticalContentAlignment" @change="handleVerticalAlignChange">
						<view class="radio-group" >
							<radio class="radio" value="bottom" :checked="formData?.verticalContentAlignment == 'bottom'" >向下</radio>
							<radio class="radio" value="center" :checked="formData?.verticalContentAlignment == 'center'">居中</radio>
							<radio class="radio" value="top" :checked="formData?.verticalContentAlignment == 'top'">向上</radio>
						</view>
					</radio-group>
				</view>
			</view>
			<view class="item">
				<view class="item-key">
					<text class="t">显示方式</text>
				</view>
				<view class="item-value">
					<radio-group name="playMode" @change="handlePlayModeChange">
						<view class="radio-group" >
							<radio class="radio" value="pageTurning" :checked="formData?.playMode == 'pageTurning'" >翻页</radio>
							<radio class="radio" value="rolling" :checked="formData?.playMode == 'rolling'">滚动</radio>
							<radio class="radio" value="stop" :checked="formData?.playMode == 'stop'">静止</radio>
						</view>
					</radio-group>
				</view>
			</view>
			<view class="item">
				<view class="item-key">
					<text class="t">播放次数</text>
				</view>
				<view class="item-value">
					<input type="number" :value="formData?.playCount" class="uni-input" />
				</view>
			</view>
			<view class="item">
				<view class="item-key">
					<text class="t">播放时长(s)</text>
				</view>
				<view class="item-value">
					<input type="text" :value="formData?.playDuration" class="uni-input" />
				</view>
			</view>
			<view v-if="formData?.playMode == 'pageTurning'">
				<view class="item">
					<view class="item-key">
						<text class="t">特效</text>
					</view>
					<view class="item-value">
						<input type="text" :value="formData?.componentEffect" class="uni-input" />
					</view>
				</view>
				<view class="item">
					<view class="item-key">
						<text class="t">特效时长(ms)</text>
					</view>
					<view class="item-value">
						<input type="number" :value="formData?.effectDuration" class="uni-input" />
					</view>
				</view>
			</view>
			<view v-else-if="formData?.playMode == 'rolling'">
				<view class="item">
					<view class="item-key">
						<text class="t">方向</text>
					</view>
					<view class="item-value">
						<input type="text" :value="formData?.direction" class="uni-input" />
					</view>
				</view>
				<view class="item">
					<view class="item-key">
						<text class="t">滚动速度</text>
					</view>
					<view class="item-value">
						<input type="number" :value="formData?.rollingSpeed" class="uni-input" />
					</view>
				</view>
				<view class="item">
					<view class="item-key">
						<text class="t">首尾相连</text>
					</view>
					<view class="item-value">
						<checkbox :checked="formData?.isLoopEnabled" @tap="handleValueChange" />
					</view>
				</view>
			</view>
		</view>
	</view>	
</template>

<script lang="uts" >
	import  { BaseComponent, TextComponent } from './mediaConfig.uts'
	export default {
		props: {
			item: {
				type: BaseComponent,
				default: null
			}
		},
		emits: ['refresh'],
		data() {
			return {
				formData: null as TextComponent | null,
			}
		},
		watch: {
			item(newValue?: BaseComponent) {
				if (newValue instanceof TextComponent) {	
					this.formData = newValue as TextComponent;
					
					const data = this.formData!.toModel();
					console.log(data);
				}
				else {
					this.formData = null;
				}
			}
		},
		onReady() {
			if (this.item instanceof TextComponent) {
				this.formData = this.item as TextComponent;
				
				const data = this.formData!.toModel();
				console.log(data);
			}
			else {
				this.formData = null;
			}
		},
		methods: {
			handleVerticalAlignChange(e: UniRadioGroupChangeEvent) {
				if(this.formData == null) return;
				const result = e.detail.value;
				this.formData!.verticalContentAlignment = result;
				const data = this.formData!.toModel();
				console.log(data);
				this.$emit("refresh", data);
			},
			handlePlayModeChange(e: UniRadioGroupChangeEvent) {
				if(this.formData == null) return;
				const result = e.detail.value;
				this.formData!.playMode = result;
				const data = this.formData!.toModel();
				console.log(data);
				this.$emit("refresh", data);
			},
			handleValueChange(_e: UniPointerEvent) {
				if (this.formData == null) return;
				this.formData!.isLoopEnabled = !this.formData!.isLoopEnabled;
				const data = this.formData!.toModel();
				console.log(data);
				this.$emit("refresh", data);
			},
			onLeftChange(e: UniInputChangeEvent) {
				this.handleUpdate(parseInt(e.detail.value), "left")
			},
			onTopChange(e: UniInputChangeEvent) {
				this.handleUpdate(parseInt(e.detail.value), "top")
			},
			onWidthChange(e: UniInputChangeEvent) {
				this.handleUpdate(parseInt(e.detail.value), "width")
			},
			onHeightChange(e: UniInputChangeEvent) {
				this.handleUpdate(parseInt(e.detail.value), "height")
			},
			handleUpdate(val: number, type: string) {
				if(this.formData == null) return;
				
				switch(type) {
					case 'left':
						this.formData!.left = val;
						if (this.formData!.width + val > 256) {
							this.formData!.width = 256 - val;
						}
						break;
					case 'top':
						this.formData!.top = val;
						if (this.formData!.height + val > 192) {
							this.formData!.height = 192 - val;
						}
						break;
					case 'width':
						let widthVal = val;
						if (this.formData!.left + val > 256) {
							widthVal = 256 - this.formData!.left;
						}
						this.formData!.width = widthVal;
						break;
					case 'height':
						let heightVal = val;
						if (this.formData!.top + val > 256) {
							heightVal = 192 - this.formData!.top;
						}
						this.formData!.height = heightVal;
						break;					
				}
				
				const data = this.formData!.toModel();
				this.$emit("refresh", data);				
			}
		}
	}
</script>

<style lang="scss">
	.component-form{
		background: #ffffff;
		border-radius: 24rpx;
		box-shadow: 0 0 12rpx rgba(0,0,0,0.05);
		padding: 12rpx 0;
		.item{
			padding: 18rpx 24rpx;
			display: flex;
			flex-direction: row;
			align-items: center;
			justify-content: space-between;
			
			.item-key{
				width: 20%;
				.t{
					font-size: 14px;
					color: #999999;
				}
			}
			
			.options {
				width: 80%;
				display: flex;
				flex-direction: column;
				.options-tab{
					width: 100%;
					display: flex;
					flex-direction: row;
					align-items: center;
					justify-content: center;
					padding-bottom: 24rpx;
					
					.item{
						padding: 0 24rpx;
						.t{
							font-size: 14px;
							color: $uni-color-grey
						}
					}
					.item.active{
						.t {
							color: $uni-color-primary
						}
					}
				}
				.option-body {
					.option-a,
					.option-b {
						display: none;
					}
					.option-a.active,
					.option-b.active {
						display: flex;
					}
					
					.local {
						// width: 21%;
						height: 220rpx;
						// flex: 1;
						background-color: $uni-color-primary;
						flex-direction: row;
						align-items: center;
						justify-content: center;
						border-radius: $uni-border-radius-lg;
						margin: 0 2%;
						.t{
							color: $uni-text-color-inverse;
							font-size: $uni-font-size-sm;
						}
					}
					.option-b {
						.item {
							display: flex;
							flex-direction: row;
							flex-wrap: wrap;
							.image {
								width: 220rpx;
								height: 200rpx;
								padding: 10rpx;
							}
						}
					}
				}
			}
			.item-value{
				width: 80%;
				display: flex;
				flex-direction: row;
				.sub-list{
					width: 100%;
					
					.sub-item{
						width: 100%;
						
						.sub-value{
							flex-direction: row;
							align-items: center;
							justify-content: space-between;
						}
					}
				}
				.uni-input{
					border: 1px solid #ccc;
					border-radius: 12rpx;
					height:30rpx
				}
			}
			.position {
				width: 80%;
				display: flex;
				flex-direction: column;
				.location {
					display: flex;
					flex-direction: row;
					align-items: center;
					margin-bottom: 10rpx;
				
					.uni-input{
						flex: 1;
						margin-left: 10rpx;
						border: 1px solid #ccc;
						border-radius: 12rpx;
						height:30rpx
					}
				}
			}
		}
		.radio-group {
			display: flex; /* 横向排列 */
			flex-direction: row; /* 行排列 */
			align-items: center; /* 垂直居中 */
			flex-wrap: wrap;
			
			.radio {
				margin-right: 20rpx;
			}
		}
	}

</style>