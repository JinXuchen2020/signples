<template>
	<scroll-view :bounces="false" :show-scrollbar="true" class="component-form" v-if="formData != null">
		<view class="item">
			<view class="item-key">
				<text class="t">{{$t("program.Location")}}</text>
			</view>
			<view class="position">
				<view class="location">
					X<input type="number" :value="formData?.left" class="uni-input" @change="onLeftChange" />						
					Y<input type="number" :value="formData?.top" class="uni-input" @change="onTopChange" />						
				</view>						
				<view class="location">
					W<input type="number" :value="formData?.width" class="uni-input" @change="onWidthChange" />
					H<input type="number" :value="formData?.height" class="uni-input" @change="onHeightChange" />
				</view>
			</view>
		</view>
		<view>
			<view class="item">
				<view class="item-key">
					<text class="t">{{$t("program.ComponentName")}}</text>
				</view>
				<view class="item-value">
					<input type="text" :value="formData?.name" class="uni-input" @change="(e: UniInputChangeEvent)=> updateProperty('name', e.detail.value)" />
				</view>
			</view>
			<view class="item">
				<view class="item-key">
					<text class="t">{{$t("program.Level")}}</text>
				</view>
				<view class="item-value">
					<input type="number" :value="formData?.zIndex" class="uni-input" @change="(e: UniInputChangeEvent)=> updateProperty('zIndex', e.detail.value)" />
				</view>
			</view>
			<view class="item">
				<view class="item-key">
					<text class="t">{{$t("program.Content")}}</text>
				</view>
				<view class="item-value">
					<rich-text class="rich-text" :selectable="true" :nodes="formData?.source"></rich-text>
				</view>
			</view>
			<view class="item">
				<view class="item-key">
					<text class="t">{{$t("program.BackgroundColor")}}</text>
				</view>
				<view class="item-value">
					<input type="color" :value="formData?.background" class="uni-input" />
				</view>
			</view>
			<view class="item">
				<view class="item-key">
					<text class="t">{{$t("program.VerticalAlignment")}}</text>
				</view>
				<view class="item-value">
					<radio-group name="verticalContentAlignment" @change="handleVerticalAlignChange">
						<view class="radio-group" >
							<radio class="radio" value="bottom" :checked="formData?.verticalContentAlignment == 'bottom'" >{{$t("program.Bottom")}}</radio>
							<radio class="radio" value="center" :checked="formData?.verticalContentAlignment == 'center'">{{$t("program.Center")}}</radio>
							<radio class="radio" value="top" :checked="formData?.verticalContentAlignment == 'top'">{{$t("program.Top")}}</radio>
						</view>
					</radio-group>
				</view>
			</view>
			<view class="item">
				<view class="item-key">
					<text class="t">{{$t("program.ShowMode")}}</text>
				</view>
				<view class="item-value">
					<radio-group name="playMode" @change="handlePlayModeChange">
						<view class="radio-group" >
							<radio class="radio" value="pageTurning" :checked="formData?.playMode == 'pageTurning'" >{{$t("program.PageTurning")}}</radio>
							<radio class="radio" value="rolling" :checked="formData?.playMode == 'rolling'">{{$t("program.Rolling")}}</radio>
							<radio class="radio" value="stop" :checked="formData?.playMode == 'stop'">{{$t("program.Stop")}}</radio>
						</view>
					</radio-group>
				</view>
			</view>
			<view class="item">
				<view class="item-key">
					<text class="t">{{$t("program.PlayCount")}}</text>
				</view>
				<view class="item-value">
					<input type="number" :value="formData?.playCount" class="uni-input" @change="(e: UniInputChangeEvent)=> updateProperty('playCount', e.detail.value)" />
				</view>
			</view>
			<view class="item">
				<view class="item-key">
					<text class="t">{{$t("program.PlayDuration")}}</text>
				</view>
				<view class="item-value">
					<picker-time :value="formData?.playDuration" :placeholder="$t('device.PleaseSelectTime')" @refresh="(value: string)=> updateProperty('playDuration', value)"></picker-time>
				</view>
			</view>
			<view v-if="formData?.playMode == 'pageTurning'">
				<view class="item">
					<view class="item-key">
						<text class="t">{{$t("program.Effect")}}</text>
					</view>
					<view class="item-value">
						<view class="uni-input" @click="showEffectActionSheet"><text class="t">{{currentEffect}}</text></view>
					</view>
				</view>
				<view class="item">
					<view class="item-key">
						<text class="t">{{$t("program.EffectDuration")}}</text>
					</view>
					<view class="item-value">
						<input type="number" :value="formData?.effectDuration" class="uni-input" @change="(e: UniInputChangeEvent)=> updateProperty('effectDuration', e.detail.value)" />
					</view>
				</view>
			</view>
			<view v-else-if="formData?.playMode == 'rolling'">
				<view class="item">
					<view class="item-key">
						<text class="t">{{$t("program.Direction")}}</text>
					</view>
					<view class="item-value">
						<view class="uni-input" @click="showDirectionActionSheet"><text class="t">{{currentDirection}}</text></view>
					</view>
				</view>
				<view class="item">
					<view class="item-key">
						<text class="t">{{$t("program.RollingSpeed")}}</text>
					</view>
					<view class="item-value">
						<input type="number" :value="formData?.rollingSpeed" class="uni-input" @change="(e: UniInputChangeEvent)=> updateProperty('rollingSpeed', e.detail.value)" />
					</view>
				</view>
				<view class="item">
					<view class="item-key">
						<text class="t">{{$t("program.LoopEnabled")}}</text>
					</view>
					<view class="item-value">
						<checkbox :checked="formData?.isLoopEnabled" @tap="handleValueChange" />
					</view>
				</view>
			</view>
		</view>
	</scroll-view>	
</template>

<script lang="uts" >
	import  { BaseComponent, TextComponent } from './mediaConfig.uts'
	export default {
		props: {
			item: {
				type: BaseComponent,
				default: null
			},
		},
		emits: ['refresh'],
		data() {
			return {
				formData: null as TextComponent | null,				
				effects: [
					{
						key: "Empty",
						name: $t("program.EffectEmpty")
					},					
					{
						key: "FadeIn",
						name: $t("program.EffectFadeIn"),
					}, 
				] as UTSJSONObject[],
				directions: [
					{
						key: "rollingLeft",
						name: $t("program.RollingLeft")
					},					
					{
						key: "rollingUp",
						name: $t("program.RollingUp"),
					},
					 {
					 	key: "rollingRight",
					 	name: $t("program.RollingRight")
					 },					
					 {
					 	key: "rollingDown",
					 	name: $t("program.RollingDown"),
					 }, 
				] as UTSJSONObject[],
				currentEffect: '',
				currentDirection: ''
			}
		},
		watch: {
			item(newValue?: BaseComponent) {
				if (newValue instanceof TextComponent) {	
					this.formData = newValue as TextComponent;
					
					this.currentEffect = this.effects.find(c => c['key'] == this.formData!.componentEffect)!.getString('name')!;
					this.currentDirection = this.directions.find(c => c['key'] == this.formData!.direction)!.getString('name')!;
				}
				else {
					this.formData = null;
				}
			}
		},
		onReady() {
			if (this.item instanceof TextComponent) {
				this.formData = this.item as TextComponent;
				this.currentEffect = this.effects.find(c => c['key'] == this.formData!.componentEffect)!.getString('name')!;
				this.currentDirection = this.directions.find(c => c['key'] == this.formData!.direction)!.getString('name')!;
				
			}
			else {
				this.formData = null;
			}
		},
		methods: {
			updateProperty(propertyName: string, proValue: string){
				if(propertyName == 'name') {
					this.formData!.name = proValue;
				}
				
				if(propertyName == 'zIndex') {
					this.formData!.zIndex = parseInt(proValue);
				}
				
				if(propertyName == 'playDuration') {
					this.formData!.playDuration = proValue;
				}
				
				if(propertyName == 'effectDuration') {
					this.formData!.effectDuration = parseInt(proValue);
				}
				
				if(propertyName == 'playCount') {
					this.formData!.playCount = parseInt(proValue);
				}
				
				if(propertyName == 'rollingSpeed') {
					this.formData!.rollingSpeed = parseInt(proValue);
				}
				const data = this.formData!.toModel();
				this.$emit("refresh", data);
			},
			handleVerticalAlignChange(e: UniRadioGroupChangeEvent) {
				if(this.formData == null) return;
				const result = e.detail.value;
				this.formData!.verticalContentAlignment = result;
				const data = this.formData!.toModel();
				this.$emit("refresh", data);
			},
			handlePlayModeChange(e: UniRadioGroupChangeEvent) {
				if(this.formData == null) return;
				const result = e.detail.value;
				this.formData!.playMode = result;
				const data = this.formData!.toModel();
				this.$emit("refresh", data);
			},
			handleValueChange(_e: UniPointerEvent) {
				if (this.formData == null) return;
				this.formData!.isLoopEnabled = !this.formData!.isLoopEnabled;
				const data = this.formData!.toModel();
				this.$emit("refresh", data);
			},
			showEffectActionSheet() {
				const options: ShowActionSheetOptions = {
					title: $t("program.Effect"),
					itemList: this.effects.map((c: UTSJSONObject) => c.getString('name')!),
					success: (res) => {
						const selectedIndex = res.tapIndex;
						this.formData!.componentEffect = this.effects[selectedIndex].getString('key')!;
						const data = this.formData!.toModel();
						this.$emit("refresh", data);
					},
					fail: (error) => {
						console.log(error);
					}
				}
				uni.showActionSheet(options)
			},
			showDirectionActionSheet() {
				const options: ShowActionSheetOptions = {
					title: $t("program.Direction"),
					itemList: this.directions.map((c: UTSJSONObject) => c.getString('name')!),
					success: (res) => {
						const selectedIndex = res.tapIndex;
						this.formData!.direction = this.directions[selectedIndex].getString('key')!;
						const data = this.formData!.toModel();
						this.$emit("refresh", data);
					},
					fail: (error) => {
						console.log(error);
					}
				}
				uni.showActionSheet(options)
			},
			onLeftChange(e: UniInputChangeEvent) {
				this.handleUpdate(parseInt(e.detail.value), "left")
			},
			onTopChange(e: UniInputChangeEvent) {
				this.handleUpdate(parseInt(e.detail.value), "top")
			},
			onWidthChange(e: UniInputChangeEvent) {
				this.handleUpdate(parseInt(e.detail.value), "width")
			},
			onHeightChange(e: UniInputChangeEvent) {
				this.handleUpdate(parseInt(e.detail.value), "height")
			},
			handleUpdate(val: number, type: string) {
				if(this.formData == null) return;
				
				switch(type) {
					case 'left':
						this.formData!.left = val;
						if (this.formData!.width + val > 256) {
							this.formData!.width = 256 - val;
						}
						break;
					case 'top':
						this.formData!.top = val;
						if (this.formData!.height + val > 192) {
							this.formData!.height = 192 - val;
						}
						break;
					case 'width':
						let widthVal = val;
						if (this.formData!.left + val > 256) {
							widthVal = 256 - this.formData!.left;
						}
						this.formData!.width = widthVal;
						break;
					case 'height':
						let heightVal = val;
						if (this.formData!.top + val > 256) {
							heightVal = 192 - this.formData!.top;
						}
						this.formData!.height = heightVal;
						break;					
				}
				
				const data = this.formData!.toModel();
				this.$emit("refresh", data);				
			}
		}
	}
</script>

<style lang="scss">
	.component-form{
		background: #ffffff;
		border-radius: 24rpx;
		box-shadow: 0 0 12rpx rgba(0,0,0,0.05);
		padding: 12rpx 0;
		height: 100%;
		.item{
			padding: 18rpx 24rpx;
			display: flex;
			flex-direction: row;
			align-items: center;
			justify-content: space-between;
			
			.item-key{
				width: 20%;
				.t{
					font-size: 14px;
					color: #999999;
				}
			}
			.item-value{
				width: 80%;
				display: flex;
				flex-direction: row;
				.uni-input{
					border: 1px solid #ccc;
					border-radius: 12rpx;
					height:30rpx
				}
				
				.rich-text{
					border: 1px solid #ccc;
					border-radius: 12rpx;
					height:160rpx;
					width: 100%;
				}
			}
			
			.position {
				width: 80%;
				display: flex;
				flex-direction: column;
				.location {
					display: flex;
					flex-direction: row;
					align-items: center;
					margin-bottom: 10rpx;
				
					.uni-input{
						flex: 1;
						margin-left: 10rpx;
						border: 1px solid #ccc;
						border-radius: 12rpx;
						height:30rpx
					}
				}
			}
		}
		.radio-group {
			display: flex; /* 横向排列 */
			flex-direction: row; /* 行排列 */
			align-items: center; /* 垂直居中 */
			flex-wrap: wrap;
			
			.radio {
				margin-right: 20rpx;
			}
		}
	}

</style>