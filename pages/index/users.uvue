<template>
	<scroll-view class="app">
		<view class="space-box"></view>
		<view class="add shadow" @click="handleCreate()">
			<image class="image" src="/static/svg/add.png" mode="aspectFill"></image>
		</view>
		<view class="wifi-list">
			<view v-if="userList.length > 0" class="item shadow" v-for="(item, index) in userList" :key="index">
				<view class="c" style="padding-bottom: 24rpx;justify-content: flex-start;">
					<view v-if="item['connectStatus'] == 1" class="icon-box icon-box-big wi2">
						<image class="icon" src="/static/icon/2-w.png" mode="widthFix"></image>
					</view>
					<view v-else class="icon-box icon-box-big wi">
						<image class="icon" src="/static/svg/account.png" mode="widthFix"></image>
					</view>
					<view>
						<view>
							<text class="wifi-t1">{{item['account']}}</text>
						</view>
						<view class="text-box" style="padding-top: 4px;">
							<text class="key">{{ $t('index.Permission') }}:</text>
							<text class="value">{{item['role']}}</text>
						</view>
					</view>
				</view>
				<view class="c" style="background-color: #f9f9f9;border-radius: 12rpx;padding: 24rpx;">
					<view class="text-box-v">
						<text class="key">{{ $t('index.Company') }}</text>
						<text class="value">{{item['company']}}</text>
					</view>
					<view class="text-box-v">
						<text class="key">{{ $t('index.Region') }}</text> 
						<text class="value">{{item['region']}}</text>
					</view>
				</view>
				<view class="c" style="padding-top: 24rpx;">
					<button class="btn devices" size="mini"  @click="handleChooseUser(item)">
							{{ $t('index.Device') }}
					</button>
					<button class="btn edit" size="mini" @click="handleEdit(item)">
							{{ $t('index.Manage') }}
					</button>
					<button class="btn del" size="mini" @click="handleDelete(item)">
						{{ $t('index.Delete') }}
					</button>
				</view>
			</view>
			<view class="no-more" v-else>
				<text class="t">{{ $t('index.NoMore') }}</text>
			</view>
		</view>
	</scroll-view>
</template>

<script lang="uts">
	import { APIS } from '@/api/config.uts'
	import { routeGoto } from '@/common/router.uts'
	
	import { request } from '@/utils/http/index'
	export default {
		data() {
			return {
				rotation: 0,
				isRotating: true,
				userInfo: {} as UTSJSONObject,
				userList: [] as Array<UTSJSONObject>,
				token: '' as String
				
			}
		},
		onLoad() {
			console.log('devices.uvue onload.')
			uni.setNavigationBarTitle({
				title: this.$t('pages.userManagement')
			});
		},
		onShow() {
			let that = this
			//获取当前有没有用户登录
			uni.getStorage({
			  key: 'token',
			  success: function(res) {
				  console.log('token res', res)
				  const token = res.data ?? '';
				  if(token !== ''){
					  that.token = token as String;
					  console.log('this.token =', that.token)
					  // this.getDeviceListPage();
					  that.getUserList();
					  uni.getStorage({
					    key: 'userInfo',
					    success: function(r) {
							console.log(r)
							const userInfo = r.data ?? {};
					  		this.userInfo = userInfo as UTSJSONObject;
					    },
					    fail: function(err) {
					      console.log('读取失败userInfo或不存在', err);
					    }
					  });
				  }
			  },
			  fail: function(err) {
			    console.log('读取失败token或不存在，请先登录', err);
				this.userList =  [] as Array<UTSJSONObject>;
				uni.showModal({
					title: "尚未登录，请您先登录?",
					success: (res: UniShowModalResult) => {
						if(res.confirm){
							uni.removeStorage({
								key: 'token',
								success: function(res) {
								}
							});
							uni.switchTab({
								url: '/pages/user/index'
							});
						}
					}
				})
			  }
			});
		},
		methods: {
			handleRouteGoto(route: string): void{
				let token = uni.getStorageSync("token")
				//判断是否登录
				if(token == ''){
					uni.showModal({
						title: "尚未登录，请您先登录??",
						success: (res: UniShowModalResult) => {
							if(res.confirm){
								uni.switchTab({
									url: '/pages/user/index'
								});
							}
						}
					})
					return;
				}else{
					uni.navigateTo({
						url: route
					});
				}
			},
			async getUserList() {
			  try {
				  const person: UTSJSONObject = {
				          agentAccount:  this.userInfo['account'],
				        }
			    const result = await request('GET', APIS.usersAll as string, person)
				const d = result as Array<UTSJSONObject>;
				console.log('d', d);
				this.userList = d
			  } catch (error) {
			    console.error('获取用户列表失败', error)
			  }
			},
			
			async handleDelete(device: UTSJSONObject){
				let that = this
				uni.showModal({
					title: "确定要删除该用户吗?",
					success: (res: UniShowModalResult) => {
						if(res.confirm){
							
							try {
								uni.showLoading({
									title: ''
								});
								uni.request({
									url: APIS.deleteDevice as string + '/' + device.id,
									method: "DELETE",
									header: {
										'Authorization': "Bearer " + this.token
									},
									data:{
										
									},
									success: (res) => {
										console.log('delete res', res)
										uni.hideLoading();
										that.getUserList();
									},
									fail: () => {
										
									}
								});
							} catch (err){
								console.log(err)
							}
							
							
						}
					}
				})
			},
			handleCreate(){
				routeGoto('/pages/user/create');
			},
			handleChooseUser(user: UTSJSONObject){
				//写入到缓存，再跳转到设备列表
				uni.setStorageSync('active-user', user);
				routeGoto('/pages/index/devices?user_id=' + user['id'] + '&user_account=' + user['account']);
				
			},
			handleEdit(user: UTSJSONObject){
				routeGoto('/pages/user/edit?user_id=' + user['id']);
			}
		}
	}
</script>

<style lang="scss">
	.wifi-info {
		flex-direction: row;
		align-items: center;
		justify-content: space-between;
		padding: 24rpx 36rpx;
		border-bottom: 1px solid #eeeeee;
		
		.wifi-meta {
			flex-direction: row;
			align-items: center;
			justify-content: flex-start;
			.wifi-name{
				color: $uni-text-color;
				font-size: 28rpx;
			}
		}
		.scan {
			flex-direction: row;
			align-items: center;
			justify-content: flex-start;
			.t {
				color: $uni-text-color;
				font-size: 28rpx;
			}
		}
	}
	
	.find-new-wifi {
		flex-direction: row;
		align-items: center;
		justify-content: flex-start;
		padding: 24rpx 36rpx;
		.t {
			color: $uni-text-color;
			font-size: 28rpx;
		}
	}
	
	.wifi-list {
		padding: 0 36rpx;
		.item{
			background-color: $uni-bg-color;
			border-radius: $uni-border-radius-lg;
			padding: 16rpx 24rpx;
			margin: 0 0 36rpx 0;
			.c{
				flex-direction: row;
				align-items: center;
				justify-content: space-between;
				padding: 8rpx 0;
				.text-box{
					flex-direction: row;
					align-items: center;
					justify-content: flex-start;
				}
				.text-box,
				.text-box-v{
					.wifi-t1{
						font-size: 32rpx;
					}
					.key{
						font-size: 24rpx;
						color: $uni-text-color-placeholder;
						margin-right: 16rpx;
					}
					.value{
						font-size: 24rpx;
						color: $uni-text-color;
					}
					.value.active{
						color: $uni-color-primary;
					}
					.value.vend{
						color: $uni-color-warning;
					}
				}
				.text-box-v{
					.key{
						text-align: center;
						margin-right: 0;
					}
					.value{
						text-align: center;
						font-weight: bold;
						padding-top: 12rpx
					}
				}
				.wi{
					background-color: beige;
					padding: 12rpx;
					border-radius: 12rpx;
				}
				.wi2{
					background-color: $uni-color-primary;
					padding: 12rpx;
					border-radius: 12rpx;
				}
				
				.btn{
					border: none;
					color: $uni-text-color-inverse;
					font-size: 28rpx;
					background-color: $uni-bg-color-blue;
				}
				.btn.devices{
					color: $uni-color-success;
					background-color: $uni-text-color-inverse;
					border: 1px solid #f0f0f0;
				}
				.btn.edit{
					color: $uni-color-primary;
					background-color: $uni-text-color-inverse;
					border: 1px solid #f0f0f0;
				}
				.btn.del{
					color: $uni-color-error;
					background-color: $uni-text-color-inverse;
					border: 1px solid #f0f0f0;
				}
			}
		}
	}
	.add{
		position: fixed;
		z-index: 99999;
		width: 96rpx;
		height: 96rpx;
		right: 25rpx;
		bottom: 256rpx;
		flex-direction: row;
		align-items: center;
		justify-content:center;
		background-color: $uni-color-success;
		border-radius: $uni-border-radius-circle;
		.image{
			width: 48rpx;
			height: 48rpx;
		}
	}
	
</style>
