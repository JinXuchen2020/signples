<template>
	<view class="app has-tabbar">
		<view class="global_status_bar"></view>
		<view class="body">
			<!-- 页面正文 -->
			<view v-if="userInfo.hasOwnProperty('account')" class="user-info">
				<view class="avatar-box">
					<image 
						class="image"
						src="/static/svg/customer-center-v.png" 
						mode="widthFix"></image>
				</view>
				<view class="avatar-name">
					<text class="t">{{userInfo['account']}}</text>
				</view>
				<view class="user-info-role">
					<text class="t" v-if="userInfo['role'] == 'admin'">{{$t('user.Admin')}}</text>
					<text class="t" v-if="userInfo['role'] == 'agent'">{{$t('user.Agent')}}</text>
					<text class="t" v-if="userInfo['role'] == 'user'">{{$t('user.RegularUser')}}</text>
				</view>
			</view>
			<view v-else class="user-info">
				<view class="avatar-box" @click="popupLogin = true">
					<image 
						class="image"
						src="/static/svg/customer-center.png" 
						mode="widthFix"></image>
				</view>
				<view class="avatar-name">
					<text class="t2" @click="popupLogin = true">{{$t('user.Login')}}</text>
				</view>
			</view>
			<view class="space-box"></view>
			<view>
				<list-view class="uc-menus">
					<list-item class="uc-menus-item">
						<view class="uc-menus-item-title">
							<view class="icon-box">
								<image class="icon" src="/static/svg/help.png" mode="widthFix"></image>
							</view>
							<text>{{$t('user.Help')}}</text>
						</view>
						<view class="icon-box">
							<image class="icon" src="/static/svg/right.png" mode="widthFix"></image>
						</view>
					</list-item>
					<list-item class="uc-menus-item end" @click="language"  >
						<view class="uc-menus-item-title">
							<view class="icon-box">
								<image class="icon" src="/static/svg/global.png" mode="widthFix"></image>
							</view>
							<text>{{$t('user.Language')}}</text>
						</view>
						<view class="icon-box">
							<image class="icon" src="/static/svg/right.png" mode="widthFix"></image>
						</view>
					</list-item>
				</list-view>
			</view>
			<view v-if="userInfo.hasOwnProperty('account')" class="logout">
				<view class="logout-btn" @click="handleLogout()">
					<text>{{$t('user.LogOut')}}</text>
				</view>
			</view>
			<!-- 页面正文结束-->
			<!-- popup -->
			<popup-default
				v-model:visible="popupLogin"
				:title="$t('user.UserLogin')"
				show-icon
				icon-src=""
				@confirm="handleLogin"
				>
				<view class="form">
					<view class="item">
						<view class="icon-box no-margin">
							<image class="icon" src="/static/svg/account.png" mode="widthFix"></image>
						</view>
						<view class="input-box">
							<input class="uni-input" v-model="account" focus type="text" :placeholder="$t('user.PleaseEnterAccount')" />
						</view>
					</view>
					<view class="item">
						<view class="icon-box no-margin">
							<image class="icon" src="/static/svg/password.png" mode="widthFix"></image>
						</view>
						<view class="input-box">
							<input class="uni-input" v-model="password" password type="password" :placeholder="$t('user.PleaseEnterPassword')" />
						</view>
					</view>
				</view>
			</popup-default>
			<!-- popup -->
		</view>
	</view>
</template>

<script lang="uts">
	import { APIS } from '@/api/config.uts'
	import { useState }  from '@/store/index.uts'
	import { request } from '@/utils/http/index'
	export default {
		data() {
			return {
				popupLogin: false,
				opacity: 0,
				account: 'business_admin',
				password: '123456',
				userInfo: {} as UTSJSONObject
			}
		},
		onLoad() {
			uni.setNavigationBarTitle({
				title: this.$t('pages.user')
			});
		},
		onShow() {
			const { state } = useState();
			if (state.token != '' && state.loginUser['id'] != null) {
				this.userInfo = state.loginUser;
			}
		},
		methods: {
			//跳转翻译
			language(){
				uni.navigateTo({
					url:"/pages/user/language"
				})	
			},
			async handleLogin(){
				try {
					uni.showLoading({
						title: ''
					});
					
					const { setToken } = useState()
					uni.request({
						url: APIS.login as string,
						method: "POST",
						data:{
							account: this.account,
							password: this.password
						},
						success: (res) => {
							uni.hideLoading();
							if(res.statusCode == 200){
								const result = res.data as UTSJSONObject;
								if(result['code'] == 200){
									const d = result['data'] as UTSJSONObject;
									if(d.hasOwnProperty('userId')){
										const userId = parseInt(d['userId'] as string);
										const token = d['token'] as String; 
										
										setToken(token);
										// uni.setStorageSync('token', token);
										// this.getAccountInfo(userId, token);
										this.getAccountInfo(userId);
									}
								}else{
									uni.showToast({
										icon: 'none',
										title: result['msg'] as string,
										duration: 2000,
										success: () => {
											this.popupLogin = false;
										}
									})
								}
							}else{
								this.popupLogin = false;
								uni.showToast({
									icon: 'none',
									title: $t("error.LoginFailure"),
									duration: 2000,
									success: () => {
										
									}
								})
							}
							
						},
						fail: () => {
							
						}
					});
				} catch (err){
					uni.hideLoading();
					console.log(err)
				}
			},
			// async getAccountInfo(id: Number, token: String){
			async getAccountInfo(id: Number){
				try {
					uni.showLoading({
						title: ''
					});
					
					const { setLoginUser, setActiveUser, setActiveDevice}  = useState()
					const apiUrl = APIS.user.getString('getById')!;
					const result = await request('GET', apiUrl.replace("{id}", `${id}`), {}) as UTSJSONObject;
					this.userInfo = result;
					setLoginUser(result);
					setActiveUser({});
					setActiveDevice({});
					this.popupLogin = false;
					uni.hideLoading();
				} catch (err){
					uni.hideLoading();
					console.log(err)
				}
			},
			handleRouteGoto(route: string){
				uni.navigateTo({
					url: route
				});
			},
			handleLogout(){
				const { setToken, setLoginUser}  = useState()
				uni.showModal({
					title: $t("error.LogoutPrompt"),
					confirmText: $t("index.Confirm"),
					cancelText: $t("index.Cancel"),
					success: (res: UniShowModalResult) => {
						if(res.confirm){
							setToken('')
							uni.showToast({
								icon: 'none',
								title: $t("error.LogoutConfirm"),
								duration: 2000,
								success: () => {
									setLoginUser({})
									this.userInfo = {}
								}
							})
						}
					}
				})
			}
		}
	}
</script>

<style lang="scss" scoped>
	.user-info{
		// height: 180px;
		background-image: linear-gradient(to right,#def1f8,#ffffff);
		border-radius: $uni-border-radius-lg;
		padding: 48rpx 0;
		.avatar-box{
			display: flex;
			align-items: center;
			justify-content: center;
			.image {
				width: 96px;
			}
		}
		.avatar-name{
			flex-direction: row;
			align-items: center;
			justify-content: center;
			padding: 24rpx 0;
			.t{
				font-size: 40rpx;
				font-weight: bold;
			}
			.t2{
				font-size: 32rpx;
				font-weight: bold;
			}
		}
		.user-info-role{
			flex-direction: row;
			align-items: center;
			justify-content: center;
			.t{
				font-size: 28rpx;
				font-weight: bold;
				color: $uni-text-color-grey;
			}
		}
	}
	.uc-menus{
		height: 100px;
		border-radius: $uni-border-radius-lg;
		background-color: $uni-bg-color;
		padding: 12rpx 24rpx;
		
		.uc-menus-item{
			flex-direction: row;
			align-items: center;
			justify-content: space-between;
			border-bottom: 1px solid #eeeeee;
			padding: 24rpx 0rpx;
			.uc-menus-item-title{
				flex-direction: row;
				align-items: center;
				justify-content: flex-start;
			}
		}
		.uc-menus-item.end{
			border-bottom: 0px solid #eeeeee;
		}
	}
	.logout{
		padding: 48rpx 0;
		.logout-btn{
			flex-direction: row;
			align-items: center;
			justify-content: center;
			border: 1px solid #def1f8;
			border-radius: $uni-border-radius-lg;
			padding: 24rpx 0;
			background-color: #def1f8;
		}
	}
	.form{
		.item{
			// border: 1px solid #eeeeee;
			border-radius: $uni-border-radius-lg;
			margin: 24rpx 0;
			padding: 12rpx;
			flex-direction: row;
			align-items: center;
			justify-content: space-between;
			.input-box{
				width: 92%;
			}
		}
	}
</style>
