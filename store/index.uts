import { reactive } from 'vue'

export type State = {
	token: string,
	loginUser: UTSJSONObject,
	program: UTSJSONObject,
	programFolder: string,
	activeDevice: UTSJSONObject,
	activeUser: UTSJSONObject
}

export type UserState = {
	state: State,
	setToken: (token: string) => void,
	setProgram:(program: UTSJSONObject) => void,
	setProgramFolder: (folderPath: string) => void,
	setActiveDevice: (device: UTSJSONObject) => void,
	setLoginUser: (userInfo: UTSJSONObject) => void,
	setActiveUser: (userInfo: UTSJSONObject) => void,
	loadStateFromStorage: () => void
}

const state = reactive<State>({
	token: '',
	loginUser: {},
	program: {},
	programFolder: '',
	activeDevice: {},
	activeUser: {},
} as State)

export function useState() {
	const setToken = (token: string) => {
		state.token = token
		uni.setStorageSync('token', token);
	}
	const setProgram = (program: UTSJSONObject) => {
		state.program = program
		uni.setStorageSync('program', program);
	}
	
	const setProgramFolder = (folderPath: string) => {
		state.programFolder = folderPath;
		uni.setStorageSync('program-folder', folderPath);
	}
	
	const setActiveDevice = (device: UTSJSONObject) => {
		state.activeDevice = device
		uni.setStorageSync('active-device', device);
	}
	
	const setActiveUser = (user: UTSJSONObject) => {
		state.activeUser = user
		uni.setStorageSync('active-user', user);
	}
  
	const setLoginUser = (userInfo: UTSJSONObject) => {
		state.loginUser = userInfo
		uni.setStorageSync('userInfo', userInfo);
	}
	
	const loadStateFromStorage = () => {
	    try {
	        state.token = uni.getStorageSync('token') as string;
	        state.loginUser = uni.getStorageSync('userInfo') as UTSJSONObject;
	        state.program = uni.getStorageSync('program') as UTSJSONObject;
	        state.programFolder = uni.getStorageSync('program-folder') as string;
	        state.activeDevice = uni.getStorageSync('active-device') as UTSJSONObject;
	        state.activeUser = uni.getStorageSync('active-user') as UTSJSONObject;
	    } catch (e) {
	        console.error('Failed to load state from storage', e);
	    }
	};

	return {
		state,
		setProgram,
		setProgramFolder,
		setLoginUser,
		setToken,
		setActiveDevice,
		setActiveUser,
		loadStateFromStorage
	} as UserState
}