import { Point } from "../coords";
import { multiply, rotate, scale, setTranslate, translate } from "./utils";

/**
 * Matrix Array Type
 * a, b, c, d, e, f
 */
// export type MatrixArray = [number, number, number, number, number, number];
export type MatrixArray = Array<number>;

export class Matrix {
	public a: number;

	public b: number;

	public c: number;

	public d: number;

	public e: number;

	public f: number;

	/**
	 * 当前矩阵数组
	 */
	get matrixArray(): MatrixArray {
		return [this.a, this.b, this.c, this.d, this.e, this.f];
	}

	constructor(matrixArray: MatrixArray = [1, 0, 0, 1, 0, 0]) {
		this.a = matrixArray[0];
		this.b = matrixArray[1];
		this.c = matrixArray[2];
		this.d = matrixArray[3];
		this.e = matrixArray[4];
		this.f = matrixArray[5];
	}

	/**
	 * 应用于坐标点
	 * @param point 坐标点
	 * @returns
	 */
	public apply(point: Point): Point {
		const x1 = this.a * point.x + this.c * point.y + this.e;
		const y1 = this.b * point.x + this.d * point.y + this.f;

		return new Point(x1, y1);
	}

	/**
	 * 克隆当前矩阵
	 * @returns
	 */
	public clone(): Matrix {
		return new Matrix(this.matrixArray);
	}

	/**
	 * 替换当前矩阵
	 * @param matrix 矩阵
	 * @returns
	 */
	public replace(matrix: Matrix): Matrix {
		this.a = matrix.a;
		this.b = matrix.b;
		this.c = matrix.c;
		this.d = matrix.d;
		this.e = matrix.e;
		this.f = matrix.f;

		return this;
	}

	/**
	 * 矩阵乘法
	 * @param matrix 矩阵
	 * @returns
	 */
	public multiply(matrix: Matrix): Matrix {
		return this.replace(multiply(matrix, this));
	}

	/**
	 * 平移
	 * @param tx x 偏移量
	 * @param ty y 偏移量
	 * @returns
	 */
	public translate(tx: number, ty: number): Matrix {
		return this.replace(translate(this, tx, ty));
	}

	/**
	 * 旋转
	 * @param xt x 弧度
	 * @param yt y 弧度
	 * @returns
	 */
	public rotate(xt: number, yt: number): Matrix {
		return this.replace(rotate(this, xt, yt));
	}

	/**
	 * 设置平移
	 * @param tx x 偏移量
	 * @param ty y 偏移量
	 * @returns
	 */
	public setTranslate(tx: number, ty: number): Matrix {
		return this.replace(setTranslate(this, tx, ty));
	}

	/**
	 * 缩放
	 * @param x x 倍率
	 * @param y y 倍率
	 * @param point 根据此坐标点进行缩放
	 * @returns
	 */
	public scale(x: number, y: number, point?: Point | null): Matrix {
		return this.replace(scale(this, x, y, point));
	}
}
