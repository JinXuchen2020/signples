import { Canvas } from "./canvas";
import { Style } from "../graphics";
import { Path } from "./path";
import { Matrix } from "../transform";
import { Point } from "../coords";

export enum EntityType {
	matrix,
	canvas,
	rect,
	polygon,
	polyline,
	arc,
	image,
	imagePixel,
	text,
	path,
}

export class Entity {
	constructor(
		public readonly type : EntityType,
		public readonly style ?: Style | null,
	) { }
}

export class MatrixEntity extends Entity {
	constructor(public readonly matrix : Matrix) {
		super(EntityType.matrix, null);
	}
}

export class CanvasEntity extends Entity {
	constructor(
		public readonly canvas : Canvas,
		style ?: Style | null
	) {
		super(EntityType.canvas, style);
	}
}

export class RectEntity extends Entity {
	constructor(
		public readonly x : number,
		public readonly y : number,
		public readonly w : number,
		public readonly h : number,
		public readonly radii : number,
		style ?: Style | null
	) {
		super(EntityType.rect, style);
	}
}

export class PolygonEntity extends Entity {
	constructor(
		public readonly points : Array<Point>,
		style ?: Style | null
	) {
		super(EntityType.polygon, style);
	}
}

export class PolylineEntity extends Entity {
	constructor(
		public readonly points : Array<Point>,
		style ?: Style | null
	) {
		super(EntityType.polyline, style);
	}
}

export class ArcEntity extends Entity {
	constructor(
		public readonly cx : number,
		public readonly cy : number,
		public readonly radius : number,
		public readonly startAngle : number,
		public readonly endAngle : number,
		public readonly counterclockwise : boolean,
		style ?: Style | null
	) {
		super(EntityType.arc, style);
	}
}

export class PictureEntity extends Entity {
	constructor(
		public readonly image : Image,
		public readonly x : number,
		public readonly y : number,
		public readonly w ?: number | null,
		public readonly h ?: number | null,
		public readonly dx ?: number | null,
		public readonly dy ?: number | null,
		public readonly dw ?: number | null,
		public readonly dh ?: number | null,
	) {
		super(EntityType.image, null);
	}
}

export class ImagePixelEntity extends Entity {
	constructor(
		public readonly imageData : ImageData,
		public readonly x : number,
		public readonly y : number,
		public readonly dx ?: number | null,
		public readonly dy ?: number | null,
		public readonly dw ?: number | null,
		public readonly dh ?: number | null,
	) {
		super(EntityType.imagePixel, null);
	}
}

export class TextEntity extends Entity {
	constructor(
		public readonly x : number,
		public readonly y : number,
		public readonly text : string,
		style ?: Style | null
	) {
		super(EntityType.text, style);
	}
}

export class PathEntity extends Entity {
	constructor(
		public readonly path : Path,
		style ?: Style | null
	) {
		super(EntityType.path, style);
	}
}

export type AllEntity =
	| MatrixEntity
	| CanvasEntity
	| RectEntity
	| PolygonEntity
	| PolylineEntity
	| ArcEntity
	| PictureEntity
	| ImagePixelEntity
	| TextEntity
	| PathEntity;

export class EntityFactory {
	public static createMatrixEntity(matrix : Matrix) : MatrixEntity {
		return new MatrixEntity(matrix);
	}

	public static createRectEntity(x : number, y : number, w : number, h : number, radii : number, style ?: Style | null) : RectEntity {
		return new RectEntity(x, y, w, h, radii, style);
	}

	public static createCanvasEntity(canvas : Canvas, style ?: Style | null) : CanvasEntity {
		return new CanvasEntity(canvas, style);
	}

	public static createPolygonEntity(points : Array<Point>, style ?: Style | null) : PolygonEntity {
		return new PolygonEntity(points, style);
	}

	public static createPolylineEntity(points : Array<Point>, style ?: Style | null) : PolylineEntity {
		return new PolylineEntity(points, style);
	}

	public static createArcEntity(
		cx : number,
		cy : number,
		radius : number,
		startAngle : number,
		endAngle : number,
		counterclockwise : boolean,
		style ?: Style | null
	) : ArcEntity {
		return new ArcEntity(cx, cy, radius, startAngle, endAngle, counterclockwise, style);
	}

	public static createPictureEntity(
		image : Image,
		x : number,
		y : number,
		w ?: number | null,
		h ?: number | null,
		dx ?: number | null,
		dy ?: number | null,
		dw ?: number | null,
		dh ?: number | null,
	) : PictureEntity {
		return new PictureEntity(image, x, y, w, h, dx, dy, dw, dh);
	}

	public static createImagePixelEntity(
		imageData : ImageData,
		x : number,
		y : number,
		dx ?: number | null,
		dy ?: number | null,
		dw ?: number | null,
		dh ?: number | null,
	) : ImagePixelEntity {
		return new ImagePixelEntity(imageData, x, y, dx, dy, dw, dh);
	}

	public static createTextEntity(text : string, x : number, y : number, style ?: Style | null) : TextEntity {
		return new TextEntity(x, y, text, style);
	}

	public static createPathEntity(path : Path, style ?: Style | null) : PathEntity {
		return new PathEntity(path, style);
	}
}